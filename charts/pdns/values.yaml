## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
##

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
## @param global.storageClass Global StorageClass for Persistent Volume(s)
##
global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  storageClass: ""

## @section Common parameters
##
## @param nameOverride String to partially override common.names.name
##
nameOverride: ""
## @param fullnameOverride String to fully override common.names.fullname
##
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}

## @param workloadKind specify the deploy kindï¼š Pod, or Deployment
workloadKind: Pod
## @section pdns-auth Parameters
##

## %%MAIN_CONTAINER/POD_DESCRIPTION%%
##
powerdns:
  ## @param powerdns.podRestartPolicy specify the pod restart policy if workloadKind set to Pod
  ## available options: Always, OnFailure, Never
  podRestartPolicy: Never
  ## @param powerdns.replicaCount Number of powerdns replicas to deploy
  ##
  replicaCount: 1
  ## Configure Pods Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param powerdns.podSecurityContext.enabled Enabled powerdns pods' Security Context
  ## @param powerdns.podSecurityContext.fsGroup Set powerdns pod's Security Context fsGroup
  ## note: podman kube play does not support fsGroup yet
  ##
  podSecurityContext:
    enabled: false
    # fsGroup: 1001
  ## @param powerdns.hostAliases powerdns pods host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param powerdns.podLabels Extra labels for powerdns pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param powerdns.podAnnotations Annotations for powerdns pods
  ## to keep container user as same permission as host user, set keep-id point to the container user and group id
  ## the userns annotation only work podman v4.9+
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ## ref: https://github.com/containers/podman/discussions/22378
  ## ref: https://github.com/PowerDNS/pdns/blob/auth-4.9.4/Dockerfile-auth#L93
  ## e.g.
  ## podAnnotations:
  ##   io.podman.annotations.userns: keep-id:uid=953,gid=953
  ##
  podAnnotations: {}
  ## Autoscaling configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  ## @param powerdns.autoscaling.enabled Enable autoscaling for powerdns
  ## @param powerdns.autoscaling.minReplicas Minimum number of powerdns replicas
  ## @param powerdns.autoscaling.maxReplicas Maximum number of powerdns replicas
  ## @param powerdns.autoscaling.targetCPU Target CPU utilization percentage
  ## @param powerdns.autoscaling.targetMemory Target Memory utilization percentage
  ##
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
  ## @param powerdns.extraVolumes Optionally specify extra list of additional volumes for the powerdns pod(s)
  ##
  extraVolumes: []
  ## @param powerdns.sidecars Add additional sidecar containers to the powerdns pod(s)
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: []
  ## @param powerdns.initContainers Add additional init containers to the powerdns pod(s)
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## e.g:
  ## - name: init-sqlite-db
  ##   image: '{{ template "powerdns.image" . }}'
  ##   imagePullPolicy: "{{ .Values.powerdns.image.pullPolicy }}"
  ##   command:
  ##     - sh
  ##     - -c
  ##     - |
  ##       if [ ! -f /var/lib/powerdns/pdns.sqlite3 ]; then
  ##         sqlite3 /var/lib/powerdns/pdns.sqlite3 < /usr/local/share/doc/pdns/schema.sqlite3.sql
  ##       fi
  ##   volumeMounts:
  ##     - name: data
  ##       mountPath: /var/lib/powerdns
  ##
  initContainers: []
  containers:
    ## @param powerdns.container.auth PowerDNS Authoritative Nameserver container config
    ##
    auth:
      ## @param powerdns.container.auth.enabled enabled powerdns auth server or not
      ##
      enabled: true
      ## powerdns pdns-auth image
      ## ref: https://hub.docker.com/r/powerdns/pdns-auth-49/tags/
      ## @param powerdns.containers.auth.image.registry pdns-auth image registry
      ## @param powerdns.containers.auth.image.repository pdns-auth image repository
      ## @param powerdns.containers.auth.image.tag pdns-auth image tag (immutable tags are recommended)
      ## @param powerdns.containers.auth.image.digest pdns-auth image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)
      ## @param powerdns.containers.auth.image.pullPolicy pdns-auth image pull policy
      ## @param powerdns.containers.auth.image.pullSecrets pdns-auth image pull secrets
      ##
      image:
        registry: docker.io
        repository: powerdns/pdns-auth-49
        tag: 4.9.4
        digest: ""
        ## Specify a imagePullPolicy
        ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
        ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
        ##
        pullPolicy: IfNotPresent
        ## Optionally specify an array of imagePullSecrets.
        ## Secrets must be manually created in the namespace.
        ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
        ## e.g:
        ## pullSecrets:
        ##   - myRegistryKeySecretName
        ##
        pullSecrets: []

      ## @param powerdns.containers.auth.containerPorts powerdns container port to expose to host
      ## the dns related ports must match with the config in @param powerdns.containers.auth.configFiles.main.local-port
      ##
      containerPorts:
        - name: dns-tcp
          containerPort: 1053
          hostPort: 53
          protocol: TCP
        - name: dns-udp
          containerPort: 1053
          hostPort: 53
          protocol: UDP
        - name: web
          containerPort: 8081
          hostPort: 8081
          protocol: TCP
      ## Configure extra options for powerdns containers' liveness and readiness probes
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
      ## @param powerdns.containers.auth.livenessProbe.enabled Enable livenessProbe on powerdns containers
      ## @param powerdns.containers.auth.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
      ## @param powerdns.containers.auth.livenessProbe.periodSeconds Period seconds for livenessProbe
      ## @param powerdns.containers.auth.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
      ## @param powerdns.containers.auth.livenessProbe.failureThreshold Failure threshold for livenessProbe
      ## @param powerdns.containers.auth.livenessProbe.successThreshold Success threshold for livenessProbe
      ## ref: https://doc.powerdns.com/authoritative/manpages/pdns_control.1.html#ping-rping
      ##
      livenessProbe:
        enabled: true
        initialDelaySeconds: 30
        periodSeconds: 300
        timeoutSeconds: 5
        failureThreshold: 3
        successThreshold: 1
        exec:
          command:
            - pdns_control
            - rping
      ## @param powerdns.containers.auth.readinessProbe.enabled Enable readinessProbe on powerdns containers
      ## @param powerdns.containers.auth.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
      ## @param powerdns.containers.auth.readinessProbe.periodSeconds Period seconds for readinessProbe
      ## @param powerdns.containers.auth.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
      ## @param powerdns.containers.auth.readinessProbe.failureThreshold Failure threshold for readinessProbe
      ## @param powerdns.containers.auth.readinessProbe.successThreshold Success threshold for readinessProbe
      ## note: podman not support readinessProbe currently
      ##
      readinessProbe:
        enabled: false
        initialDelaySeconds: foo
        periodSeconds: bar
        timeoutSeconds: foo
        failureThreshold: bar
        successThreshold: foo
      ## @param powerdns.containers.auth.startupProbe.enabled Enable startupProbe on powerdns containers
      ## @param powerdns.containers.auth.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
      ## @param powerdns.containers.auth.startupProbe.periodSeconds Period seconds for startupProbe
      ## @param powerdns.containers.auth.startupProbe.timeoutSeconds Timeout seconds for startupProbe
      ## @param powerdns.containers.auth.startupProbe.failureThreshold Failure threshold for startupProbe
      ## @param powerdns.containers.auth.startupProbe.successThreshold Success threshold for startupProbe
      ##
      startupProbe:
        enabled: false
        initialDelaySeconds: foo
        periodSeconds: bar
        timeoutSeconds: foo
        failureThreshold: bar
        successThreshold: foo
      ## @param powerdns.containers.auth.customLivenessProbe Custom livenessProbe that overrides the default one
      ##
      customLivenessProbe: {}
      ## @param powerdns.containers.auth.customReadinessProbe Custom readinessProbe that overrides the default one
      ##
      customReadinessProbe: {}
      ## @param powerdns.containers.auth.customStartupProbe Custom startupProbe that overrides the default one
      ##
      customStartupProbe: {}
      ## powerdns resource requests and limits
      ## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
      ## @param powerdns.containers.auth.resourcesPreset Set powerdns container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if powerdns.containers.auth.resources is set (powerdns.resources is recommended for production).
      ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
      ##
      resourcesPreset: "nano"
      ## @param powerdns.containers.auth.resources Set powerdns container requests and limits for different resources like CPU or memory (essential for production workloads)
      ## Example:
      ## resources:
      ##   requests:
      ##     cpu: 2
      ##     memory: 512Mi
      ##   limits:
      ##     cpu: 3
      ##     memory: 1024Mi
      ##
      resources: {}

      ## Configure Container Security Context
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
      ## @param powerdns.containers.auth.containerSecurityContext.enabled Enabled powerdns containers' Security Context
      ## @param powerdns.containers.auth.containerSecurityContext.runAsUser Set powerdns containers' Security Context runAsUser
      ## @param powerdns.containers.auth.containerSecurityContext.runAsNonRoot Set powerdns containers' Security Context runAsNonRoot
      ## @param powerdns.containers.auth.containerSecurityContext.readOnlyRootFilesystem Set powerdns containers' Security Context runAsNonRoot
      ## ref: https://github.com/PowerDNS/pdns/blob/auth-4.9.4/Dockerfile-auth#L93
      ##
      containerSecurityContext:
        enabled: true
        runAsUser: 953
        runAsNonRoot: true
        readOnlyRootFilesystem: false

      # %%OTHER_PARAMETERS_RELATED_TO_THIS_CONTAINER/POD%%
      ## @param powerdns.containers.auth.configFiles powerDNS auth server application config
      ##
      configFiles:
        ## @param powerdns.containers.auth.configFiles.main powerdns auth server image builtin config file
        ## which will place in /etc/powerdns/pdns.conf
        ## beside this file, all other files list in the same level will place under /etc/powerdns/pdns.d
        ## which specify in powerdns.containers.auth.configFiles.main.include-dir
        ## powerdns auth server will load config (by default) in /etc/powerdns/pdns.conf
        ## ref: https://doc.powerdns.com/authoritative/settings.html#config-dir
        ## ref: https://doc.powerdns.com/authoritative/running.html#running-in-the-foreground
        ## ref: https://github.com/PowerDNS/pdns/blob/auth-4.9.4/dockerdata/pdns.conf
        ##
        main:
          ## @param powerdns.containers.auth.configFiles.main.local-address Local IP addresses to which we bind.
          ## Each address specified can include a port number; if no port is included then the local-port port will be used for that address.
          ## If a port number is specified, it must be separated from the address with a â€˜:â€™; for an IPv6 address the address must be enclosed in square brackets.
          ## ref: https://doc.powerdns.com/authoritative/settings.html#local-address
          ##
          local-address: "0.0.0.0,::"
          ## @param powerdns.containers.auth.configFiles.main.local-port Local port to bind to. If an address in local-address does not have an explicit port, this port is used.
          ## rootless user cannot bind 53 port, so use 1053 instead
          ## ref: https://doc.powerdns.com/authoritative/settings.html#local-port
          ##
          local-port: 1053
          ## @param powerdns.containers.auth.configFiles.main.launch
          ## Which backends to launch and order to query them in. Launches backends.
          ## In its most simple form, supply all backends that need to be launched
          ## ref: https://doc.powerdns.com/authoritative/settings.html#launch
          ##
          launch: gsqlite3
          ## @param powerdns.containers.auth.configFiles.main.gsqlite3-dnssec Enable DNSSEC processing
          ## @param powerdns.containers.auth.configFiles.main.gsqlite3-database Path to the SQLite3 database
          ## ref: https://doc.powerdns.com/authoritative/backends/generic-sqlite3.html
          ##
          gsqlite3-dnssec: yes
          gsqlite3-database: /var/lib/powerdns/pdns.sqlite3
          ## @param powerdns.containers.auth.configFiles.main.include-dir Directory to scan for additional config files. All files that end with .conf are loaded in order using POSIX as locale.
          ## ref: https://doc.powerdns.com/authoritative/settings.html#include-dir
          ##
          include-dir: /etc/powerdns/pdns.d
        ## @param powerdns.containers.auth.configFiles._aipConf powerdns image builtin config file
        ## which will place in /etc/powerdns/pdns.d/_api.conf
        ## ref: https://github.com/PowerDNS/pdns/blob/auth-4.9.4/dockerdata/startup.py#L29-L33
        ##
        _api:
          ## @param powerdns.containers.auth.configFiles._aipConf.webserver Start a webserver for monitoring
          ## ref: https://doc.powerdns.com/authoritative/settings.html#webserver
          ##
          webserver: yes
          ## @param powerdns.containers.auth.configFiles._aipConf.api Enable/disable the Built-in Webserver and HTTP API.
          ## ref: https://doc.powerdns.com/authoritative/settings.html#api
          ##
          api: yes
          ## @param powerdns.containers.auth.configFiles._aipConf.api-key Static pre-shared authentication key for access to the REST API.
          ## Since 4.6.0 the key can be hashed and salted using pdnsutil hash-password instead of being stored in the configuration in plaintext,
          ## but the plaintext version is still supported.
          ## ref: https://doc.powerdns.com/authoritative/settings.html#api-key
          ##
          api-key: powerdns
          ## @param powerdns.containers.auth.configFiles._aipConf.webserver-address IP Address for webserver/API to listen on.
          ## ref: https://doc.powerdns.com/authoritative/settings.html#webserver-address
          ##
          webserver-address: 0.0.0.0
          ## @param powerdns.containers.auth.configFiles._aipConf.webserver-port The port where webserver/API will listen on.
          ## ref: https://doc.powerdns.com/authoritative/settings.html#webserver-port
          ##
          webserver-port: 8081
          ## @param powerdns.containers.auth.configFiles._aipConf.ebserver-allow-from Webserver/API access is only allowed from these subnets.
          ## ref: https://doc.powerdns.com/authoritative/settings.html#webserver-allow-from
          ##
          webserver-allow-from: 0.0.0.0/0
          ## @param powerdns.containers.auth.configFiles._aipConf.webserver-password Password required to access the webserver.
          ## Since 4.6.0 the password can be hashed and salted using pdnsutil hash-password instead of being present in the configuration in plaintext,
          ## but the plaintext version is still supported.
          ## ref: https://doc.powerdns.com/authoritative/settings.html#webserver-password
          ##
          webserver-password: powerdns
      ## @param powerdns.containers.auth.existingConfigmap The name of an existing ConfigMap with your custom configuration for powerdns
      ##
      existingConfigmap:
      ## @param powerdns.containers.auth.command Override default container command (useful when using custom images)
      ##
      command:
        - sh
        - -c
        - |
          if [ ! -f /var/lib/powerdns/pdns.sqlite3 ]; then
            sqlite3 /var/lib/powerdns/pdns.sqlite3 < /usr/local/share/doc/pdns/schema.sqlite3.sql
          fi
          /usr/local/sbin/pdns_server-startup
      ## @param powerdns.containers.auth.args Override default container args (useful when using custom images)
      ##
      args: []

      ## @param powerdns.containers.auth.extraEnvVars Array with extra environment variables to add to powerdns nodes
      ## e.g:
      ## extraEnvVars:
      ##   - name: FOO
      ##     value: "bar"
      ##
      extraEnvVars: []
      ## @param powerdns.containers.auth.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for powerdns nodes
      ##
      extraEnvVarsCM: ""
      ## @param powerdns.containers.auth.extraEnvVarsSecret Name of existing Secret containing extra env vars for powerdns nodes
      ##
      extraEnvVarsSecret: ""
      ## @param powerdns.containers.auth.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the powerdns container(s)
      ##
      extraVolumeMounts: []
    ## @param powerdns.container.recursor PowerDNS Recursor container config
    ##
    recursor:
      ## @param powerdns.container.recursor.enabled enabled this container or not
      ##
      enabled: false
      ## powerdns pdns-auth image
      ## ref: https://hub.docker.com/r/powerdns/pdns-auth-49/tags/
      ## @param powerdns.containers.recursor.image.registry pdns-auth image registry
      ## @param powerdns.containers.recursor.image.repository pdns-auth image repository
      ## @param powerdns.containers.recursor.image.tag pdns-auth image tag (immutable tags are recommended)
      ## @param powerdns.containers.recursor.image.digest pdns-auth image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)
      ## @param powerdns.containers.recursor.image.pullPolicy pdns-auth image pull policy
      ## @param powerdns.containers.recursor.image.pullSecrets pdns-auth image pull secrets
      ##
      image:
        registry: docker.io
        repository: powerdns/pdns-recursor-49
        tag: 4.9.9
        digest: ""
        ## Specify a imagePullPolicy
        ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
        ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
        ##
        pullPolicy: IfNotPresent
        ## Optionally specify an array of imagePullSecrets.
        ## Secrets must be manually created in the namespace.
        ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
        ## e.g:
        ## pullSecrets:
        ##   - myRegistryKeySecretName
        ##
        pullSecrets: []

      ## @param powerdns.containers.recursor.containerPorts powerdns container port to expose to host
      ## the dns related ports must match with the config in @param powerdns.containers.recursor.configFiles.main.local-port
      ##
      containerPorts:
        - name: dns-tcp
          containerPort: 1053
          hostPort: 53
          protocol: TCP
        - name: dns-udp
          containerPort: 1053
          hostPort: 53
          protocol: UDP
        - name: web
          containerPort: 8082
          hostPort: 8082
          protocol: TCP
      ## Configure extra options for powerdns containers' liveness and readiness probes
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
      ## @param powerdns.containers.recursor.livenessProbe.enabled Enable livenessProbe on powerdns containers
      ## @param powerdns.containers.recursor.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
      ## @param powerdns.containers.recursor.livenessProbe.periodSeconds Period seconds for livenessProbe
      ## @param powerdns.containers.recursor.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
      ## @param powerdns.containers.recursor.livenessProbe.failureThreshold Failure threshold for livenessProbe
      ## @param powerdns.containers.recursor.livenessProbe.successThreshold Success threshold for livenessProbe
      ## ref: https://doc.powerdns.com/authoritative/manpages/pdns_control.1.html#ping-rping
      ##
      livenessProbe:
        enabled: true
        initialDelaySeconds: 30
        periodSeconds: 300
        timeoutSeconds: 5
        failureThreshold: 3
        successThreshold: 1
        exec:
          command:
            - pdns_control
            - rping
      ## @param powerdns.containers.recursor.readinessProbe.enabled Enable readinessProbe on powerdns containers
      ## @param powerdns.containers.recursor.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
      ## @param powerdns.containers.recursor.readinessProbe.periodSeconds Period seconds for readinessProbe
      ## @param powerdns.containers.recursor.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
      ## @param powerdns.containers.recursor.readinessProbe.failureThreshold Failure threshold for readinessProbe
      ## @param powerdns.containers.recursor.readinessProbe.successThreshold Success threshold for readinessProbe
      ## note: podman not support readinessProbe currently
      ##
      readinessProbe:
        enabled: false
        initialDelaySeconds: foo
        periodSeconds: bar
        timeoutSeconds: foo
        failureThreshold: bar
        successThreshold: foo
      ## @param powerdns.containers.recursor.startupProbe.enabled Enable startupProbe on powerdns containers
      ## @param powerdns.containers.recursor.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
      ## @param powerdns.containers.recursor.startupProbe.periodSeconds Period seconds for startupProbe
      ## @param powerdns.containers.recursor.startupProbe.timeoutSeconds Timeout seconds for startupProbe
      ## @param powerdns.containers.recursor.startupProbe.failureThreshold Failure threshold for startupProbe
      ## @param powerdns.containers.recursor.startupProbe.successThreshold Success threshold for startupProbe
      ##
      startupProbe:
        enabled: false
        initialDelaySeconds: foo
        periodSeconds: bar
        timeoutSeconds: foo
        failureThreshold: bar
        successThreshold: foo
      ## @param powerdns.containers.recursor.customLivenessProbe Custom livenessProbe that overrides the default one
      ##
      customLivenessProbe: {}
      ## @param powerdns.containers.recursor.customReadinessProbe Custom readinessProbe that overrides the default one
      ##
      customReadinessProbe: {}
      ## @param powerdns.containers.recursor.customStartupProbe Custom startupProbe that overrides the default one
      ##
      customStartupProbe: {}
      ## powerdns resource requests and limits
      ## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
      ## @param powerdns.containers.recursor.resourcesPreset Set powerdns container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if powerdns.containers.recursor.resources is set (powerdns.resources is recommended for production).
      ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
      ##
      resourcesPreset: "nano"
      ## @param powerdns.containers.recursor.resources Set powerdns container requests and limits for different resources like CPU or memory (essential for production workloads)
      ## Example:
      ## resources:
      ##   requests:
      ##     cpu: 2
      ##     memory: 512Mi
      ##   limits:
      ##     cpu: 3
      ##     memory: 1024Mi
      ##
      resources: {}

      ## Configure Container Security Context
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
      ## @param powerdns.containers.recursor.containerSecurityContext.enabled Enabled powerdns containers' Security Context
      ## @param powerdns.containers.recursor.containerSecurityContext.runAsUser Set powerdns containers' Security Context runAsUser
      ## @param powerdns.containers.recursor.containerSecurityContext.runAsNonRoot Set powerdns containers' Security Context runAsNonRoot
      ## @param powerdns.containers.recursor.containerSecurityContext.readOnlyRootFilesystem Set powerdns containers' Security Context runAsNonRoot
      ## ref: https://github.com/PowerDNS/pdns/blob/rec-4.9.9/Dockerfile-recursor#L95
      ##
      containerSecurityContext:
        enabled: true
        runAsUser: 953
        runAsNonRoot: true
        readOnlyRootFilesystem: false

      # %%OTHER_PARAMETERS_RELATED_TO_THIS_CONTAINER/POD%%
      ## @param powerdns.containers.recursor.configFiles powerDNS auth server application config
      ##
      configFiles:
        ## @param powerdns.containers.recursor.configFiles.main powerdns recursor server image builtin config file
        ## which will place in /etc/powerdns/recursor.conf
        ## beside this file, all other files list in the same level will place under /etc/powerdns/recursor.d
        ## which specify in powerdns.containers.recursor.configFiles.main.include-dir
        ## powerdns recursor server will load config (by default) in /etc/powerdns/recursor.conf
        ## ref: https://doc.powerdns.com/recursor/settings.html#config-dir
        ## ref: https://doc.powerdns.com/recursor/getting-started.html#configuring-powerdns-recursor
        ## ref: https://github.com/PowerDNS/pdns/blob/rec-4.9.9/dockerdata/recursor.conf
        ##
        recursor:
          ## @param powerdns.containers.recursor.configFiles.main.local-address Local IP addresses to which we bind.
          ## Each address specified can include a port number; if no port is included then the local-port port will be used for that address.
          ## If a port number is specified, it must be separated from the address with a â€˜:â€™; for an IPv6 address the address must be enclosed in square brackets.
          ## ref: https://doc.powerdns.com/recursor/settings.html#local-address
          ##
          local-address: "0.0.0.0,::"
          ## @param powerdns.containers.recursor.configFiles.main.local-port Local port to bind to. If an address in local-address does not have an explicit port, this port is used.
          ## rootless user cannot bind 53 port, so use 1053 instead
          ## ref: https://doc.powerdns.com/authoritative/settings.html#local-port
          ##
          local-port: 1053
          ## @param powerdns.containers.recursor.configFiles.main.include-dir Directory to scan for additional config files. All files that end with .conf are loaded in order using POSIX as locale.
          ## ref: https://doc.powerdns.com/recursor/settings.html#include-dir
          ##
          include-dir: /etc/powerdns/recursor.d
        ## @param powerdns.containers.recursor.configFiles._aipConf powerdns image builtin config file
        ## which will place in /etc/powerdns/recursor.d/_api.conf
        ## ref: https://github.com/PowerDNS/pdns/blob/rec-4.9.9/dockerdata/startup.py#L19-L22
        ## ref: https://doc.powerdns.com/recursor/http-api/index.html
        ##
        _api:
          ## @param powerdns.containers.recursor.configFiles._aipConf.api-key Static pre-shared authentication key for access to the REST API.
          ## Since 4.6.0 the key can be hashed and salted using pdnsutil hash-password instead of being stored in the configuration in plaintext,
          ## but the plaintext version is still supported.
          ## ref: https://doc.powerdns.com/recursor/settings.html#api-key
          ##
          api-key: powerdns
          ## @param powerdns.containers.recursor.configFiles._aipConf.webserver Start a webserver for monitoring
          ## ref: https://doc.powerdns.com/recursor/settings.html#webserver
          ##
          webserver: yes
          ## @param powerdns.containers.recursor.configFiles._aipConf.webserver-address IP Address for webserver/API to listen on.
          ## ref: https://doc.powerdns.com/recursor/settings.html#webserver-address
          ##
          webserver-address: 0.0.0.0
          ## @param powerdns.containers.recursor.configFiles._aipConf.webserver-port The port where webserver/API will listen on.
          ## ref: https://doc.powerdns.com/recursor/settings.html#webserver-port
          ##
          webserver-port: 8081
          ## @param powerdns.containers.recursor.configFiles._aipConf.ebserver-allow-from Webserver/API access is only allowed from these subnets.
          ## ref: https://doc.powerdns.com/recursor/settings.html#webserver-allow-from
          ##
          webserver-allow-from: 0.0.0.0/0
          ## @param powerdns.containers.recursor.configFiles._aipConf.webserver-password Password required to access the webserver.
          ## Since 4.6.0 the password can be hashed and salted using pdnsutil hash-password instead of being present in the configuration in plaintext,
          ## but the plaintext version is still supported.
          ## ref: https://doc.powerdns.com/recursor/settings.html#webserver-password
          ##
          webserver-password: powerdns
      ## @param powerdns.containers.recursor.existingConfigmap The name of an existing ConfigMap with your custom configuration for powerdns
      ##
      existingConfigmap:
      ## @param powerdns.containers.recursor.command Override default container command (useful when using custom images)
      ##
      command: []
      ## @param powerdns.containers.recursor.args Override default container args (useful when using custom images)
      ##
      args: []

      ## @param powerdns.containers.recursor.extraEnvVars Array with extra environment variables to add to powerdns nodes
      ## e.g:
      ## extraEnvVars:
      ##   - name: FOO
      ##     value: "bar"
      ##
      extraEnvVars: []
      ## @param powerdns.containers.recursor.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for powerdns nodes
      ##
      extraEnvVarsCM: ""
      ## @param powerdns.containers.recursor.extraEnvVarsSecret Name of existing Secret containing extra env vars for powerdns nodes
      ##
      extraEnvVarsSecret: ""
      ## @param powerdns.containers.recursor.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the powerdns container(s)
      ##
      extraVolumeMounts: []

## @section Persistence Parameters
##

## Enable persistence using Persistent Volume Claims
## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  ## @param persistence.enabled Enable persistence using Persistent Volume Claims
  ##
  enabled: true
  ## @param persistence.mountPath Path to mount the volume at.
  ##
  mountPath: /var/lib/powerdns
  ## @param persistence.subPath The subdirectory of the volume to mount to, useful in dev environments and one PV for multiple services
  ##
  subPath: ""
  ## @param persistence.storageClass Storage class of backing PVC
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: ""
  ## @param persistence.annotations Persistent Volume Claim annotations
  ##
  annotations: {}
  ## @param persistence.accessModes Persistent Volume Access Modes
  ##
  accessModes:
    - ReadWriteOnce
  ## @param persistence.size Size of data volume
  ##
  size: 8Gi
  ## @param persistence.existingClaim The name of an existing PVC to use for persistence
  ##
  existingClaim: ""
## @section Init Container Parameters
##

## 'volumePermissions' init container parameters
## Changes the owner and group of the persistent volume mount point to runAsUser:fsGroup values
##   based on the *podSecurityContext/*containerSecurityContext parameters
##
volumePermissions:
  ## @param volumePermissions.enabled Enable init container that changes the owner/group of the PV mount point to `runAsUser:fsGroup`
  ##
  enabled: false
  ## OS Shell + Utility image
  ## ref: https://hub.docker.com/r/bitnami/os-shell/tags/
  ## @param volumePermissions.image.registry OS Shell + Utility image registry
  ## @param volumePermissions.image.repository OS Shell + Utility image repository
  ## @param volumePermissions.image.tag OS Shell + Utility image tag (immutable tags are recommended)
  ## @param volumePermissions.image.pullPolicy OS Shell + Utility image pull policy
  ## @param volumePermissions.image.pullSecrets OS Shell + Utility image pull secrets
  ##
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 11-debian-11-r%%IMAGE_REVISION%%
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## Init container's resource requests and limits
  ## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param volumePermissions.resourcesPreset Set init container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if volumePermissions.resources is set (volumePermissions.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param volumePermissions.resources Set init container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Init container Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param volumePermissions.containerSecurityContext.runAsUser Set init container's Security Context runAsUser
  ## NOTE: when runAsUser is set to special value "auto", init container will try to chown the
  ##   data folder to auto-determined user&group, using commands: `id -u`:`id -G | cut -d" " -f2`
  ##   "auto" is especially useful for OpenShift which has scc with dynamic user ids (and 0 is not allowed)
  ##
  containerSecurityContext:
    runAsUser: 0

## @section Other Parameters
##

## %%SUBCHART_CONTAINER/POD_DESCRIPTION%%
##
# %%SUBCHART_NAME%%:
SUBCHART_NAME:
  enabled: false
  # %%OTHER_PARAMETERS_RELATED_TO_THIS_SUBCHART%%
