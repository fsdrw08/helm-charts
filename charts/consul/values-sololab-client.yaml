## %%MAIN_CONTAINER/POD_DESCRIPTION%%
##
consul:
  ## @param consul.containerPorts consul container port to expose to host
  ## containerPorts:
  ##   - name: server
  ##     containerPort: 8300
  ##     hostIP: 192.168.255.11
  ##     protocol: TCP
  ##   - name: serf_lan
  ##     containerPort: 8301
  ##     hostIP: 192.168.255.11
  ##     protocol: TCP
  ##   - name: web
  ##     containerPort: 8500
  ##   - name: dns
  ##     containerPort: 8600
  ##     protocol: UDP
  # containerPorts:
  # - name: server
  #   containerPort: 8300
  #   # hostIP: 192.168.255.11
  #   protocol: TCP
  # - name: serf_lan
  #   containerPort: 8301
  #   # hostIP: 192.168.255.11
  #   protocol: TCP
  # - name: dns
  #   containerPort: 8600
  #   protocol: UDP
  ## @param consul.configFiles config file to start consul, the sub config block will convert to json and injected as ConfigMap
  ## You can add whatever sub items under this block
  ## ref: https://developer.hashicorp.com/consul/docs/agent/config/config-files
  configFiles:
    common:
      bind_addr: "192.168.255.11"
      ## @param consul.configFiles.common.encrypt Specifies the secret key to use for encryption of Consul network traffic.
      ## The easiest way to create an encryption key is to use consul keygen.
      ## ref: https://developer.hashicorp.com/consul/docs/agent/config/cli-flags#_encrypt
      encrypt: qDOPBEr+/oUVeOFQOnVypxwDaHzLrD+lvjo5vCEBbZ0=
    ## ref: https://github.com/hashicorp/learn-consul-docker/blob/v0.3/datacenter-deploy-auto-config/vault/consul/server1.json
    acl:
      acl:
        enabled: true
        default_policy: deny
        enable_token_persistence: true
        tokens:
          initial_management: e95b599e-166e-7d80-08ad-aee76e7ddf19
          agent: e95b599e-166e-7d80-08ad-aee76e7ddf19
          config_file_service_registration: e95b599e-166e-7d80-08ad-aee76e7ddf19

  ## @param consul.existingConfigmap The name of an existing ConfigMap with your custom configuration for consul
  ##
  existingConfigmap:
  ## @param consul.command Override default container command (useful when using custom images)
  ##
  command: []
  ## @param consul.args Override default container args (useful when using custom images)
  ##
  args: []
  ## @param consul.hostAliases consul pods host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param consul.podLabels Extra labels for consul pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels:
    traefik.enable: true
    traefik.http.routers.consul.rule: "Host(`consul.infra.sololab`)"
    traefik.http.routers.consul.entryPoints: websecure
    traefik.http.routers.consul.tls.certresolver: internal
    traefik.http.services.consul.loadbalancer.server.port: 8500
  ## @param consul.podAnnotations Annotations for consul pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}
  ## Autoscaling configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  ## @param consul.autoscaling.enabled Enable autoscaling for consul
  ## @param consul.autoscaling.minReplicas Minimum number of consul replicas
  ## @param consul.autoscaling.maxReplicas Maximum number of consul replicas
  ## @param consul.autoscaling.targetCPU Target CPU utilization percentage
  ## @param consul.autoscaling.targetMemory Target Memory utilization percentage
  ##
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""

  ## @param consul.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for consul nodes
  ##
  extraEnvVarsCM: ""
  ## @param consul.extraEnvVarsSecret Name of existing Secret containing extra env vars for consul nodes
  ##
  extraEnvVarsSecret: ""
  ## @param consul.extraVolumes Optionally specify extra list of additional volumes for the consul pod(s)
  ##
  extraVolumes: []
  ## @param consul.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the consul container(s)
  ##
  extraVolumeMounts: []
  ## @param consul.sidecars Add additional sidecar containers to the consul pod(s)
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: []
  ## @param consul.initContainers Add additional init containers to the consul pod(s)
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']
  ##
  initContainers: []

## @section Persistence Parameters
##

## Enable persistence using Persistent Volume Claims
## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  ## @param persistence.enabled Enable persistence using Persistent Volume Claims
  ##
  enabled: true
  ## @param persistence.subPath The subdirectory of the volume to mount to, useful in dev environments and one PV for multiple services
  ##
  subPath: ""
  ## @param persistence.storageClass Storage class of backing PVC
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: ""
  ## @param persistence.annotations Persistent Volume Claim annotations
  ##
  annotations: {}
  ## @param persistence.accessModes Persistent Volume Access Modes
  ##
  accessModes:
    - ReadWriteOnce
  ## @param persistence.size Size of data volume
  ##
  size: 8Gi
  ## @param persistence.existingClaim The name of an existing PVC to use for persistence
  ##
  existingClaim: ""
  ## @param persistence.dataSource Custom PVC data source
  ##
  dataSource: {}
## @section Init Container Parameters
##

## 'volumePermissions' init container parameters
## Changes the owner and group of the persistent volume mount point to runAsUser:fsGroup values
##   based on the *podSecurityContext/*containerSecurityContext parameters
##
volumePermissions:
  ## @param volumePermissions.enabled Enable init container that changes the owner/group of the PV mount point to `runAsUser:fsGroup`
  ##
  enabled: false
  ## OS Shell + Utility image
  ## ref: https://hub.docker.com/r/bitnami/os-shell/tags/
  ## @param volumePermissions.image.registry OS Shell + Utility image registry
  ## @param volumePermissions.image.repository OS Shell + Utility image repository
  ## @param volumePermissions.image.tag OS Shell + Utility image tag (immutable tags are recommended)
  ## @param volumePermissions.image.pullPolicy OS Shell + Utility image pull policy
  ## @param volumePermissions.image.pullSecrets OS Shell + Utility image pull secrets
  ##
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 11-debian-11-r%%IMAGE_REVISION%%
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## Init container's resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ## @param volumePermissions.resources.limits The resources limits for the init container
  ## @param volumePermissions.resources.requests The requested resources for the init container
  ##
  resources:
    limits: {}
    requests: {}
  ## Init container Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param volumePermissions.containerSecurityContext.runAsUser Set init container's Security Context runAsUser
  ## NOTE: when runAsUser is set to special value "auto", init container will try to chown the
  ##   data folder to auto-determined user&group, using commands: `id -u`:`id -G | cut -d" " -f2`
  ##   "auto" is especially useful for OpenShift which has scc with dynamic user ids (and 0 is not allowed)
  ##
  # containerSecurityContext:
  #   runAsUser: 0
## @section Other Parameters
##

