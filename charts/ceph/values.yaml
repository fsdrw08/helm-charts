## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
##

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
## @param global.storageClass Global StorageClass for Persistent Volume(s)
##
global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  storageClass: ""

## @section Common parameters
##
## @param nameOverride String to partially override common.names.name
##
nameOverride: ""
## @param fullnameOverride String to fully override common.names.fullname
##
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}

## @param deployKind specify the deploy kindï¼š Pod, or Deployment
deployKind: Pod
## @section %%MAIN_CONTAINER%% Parameters
##

ceph:
  ## Autoscaling configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  ## @param ceph.autoscaling.enabled Enable autoscaling for ceph
  ## @param ceph.autoscaling.minReplicas Minimum number of ceph replicas
  ## @param ceph.autoscaling.maxReplicas Maximum number of ceph replicas
  ## @param ceph.autoscaling.targetCPU Target CPU utilization percentage
  ## @param ceph.autoscaling.targetMemory Target Memory utilization percentage
  ##
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
  ## @param ceph.replicaCount Number of %%MAIN_CONTAINER_NAME%% replicas to deploy
  ##
  replicaCount: 1
  ## @param ceph.podAnnotations Annotations for %%MAIN_CONTAINER_NAME%% pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}
  ## @param ceph.podLabels Extra labels for %%MAIN_CONTAINER_NAME%% pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## e.g:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: []
  ## @param ceph.hostAliases %%MAIN_CONTAINER_NAME%% pods host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## Configure Pods Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param ceph.podSecurityContext.enabled Enabled %%MAIN_CONTAINER_NAME%% pods' Security Context
  ## @param ceph.podSecurityContext.fsGroup Set %%MAIN_CONTAINER_NAME%% pod's Security Context fsGroup
  ## note: podman kube play does not support fsGroup yet
  ##
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  ## @param ceph.podRestartPolicy specify the pod restart policy if deployKind set to Pod
  ## available options: Always, OnFailure, Never
  ##
  podRestartPolicy: Never
  ## mon deploys a Ceph monitor
  ##
  mon:
    ## ceph monitor image
    ## ref: https://quay.io/repository/ceph/daemon?tab=tags
    ## @param ceph.mon.image.registry %%MAIN_CONTAINER%% image registry
    ## @param ceph.mon.image.repository %%MAIN_CONTAINER%% image repository
    ## @param ceph.mon.image.tag %%MAIN_CONTAINER%% image tag (immutable tags are recommended)
    ## @param ceph.mon.image.digest %%MAIN_CONTAINER%% image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)
    ## @param ceph.mon.image.pullPolicy %%MAIN_CONTAINER%% image pull policy
    ## @param ceph.mon.image.pullSecrets %%MAIN_CONTAINER%% image pull secrets
    ##
    image:
      registry: quay.io
      repository: ceph/daemon
      tag: latest-reef
      digest: ""
      ## Specify a imagePullPolicy
      ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
      ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
      ##
      pullPolicy: IfNotPresent
    ## @param ceph.mon.containerPorts %%MAIN_CONTAINER_NAME%% container port to expose to host
    ## e.g.
    ## containerPorts:
    ##   - name: http
    ##     containerPort: 80
    ##     hostPort: 80
    ##     hostIP: 192.168.255.10
    ##     protocol: TCP
    ##   - name: https
    ##     containerPort: 443
    ##     hostPort: 443
    ##     hostIP: 192.168.255.10
    ##     protocol: TCP
    ##
    containerPorts: {}
    ## Configure extra options for %%MAIN_CONTAINER_NAME%% containers' liveness and readiness probes
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
    ## @param ceph.mon.livenessProbe.enabled Enable livenessProbe on %%MAIN_CONTAINER_NAME%% containers
    ## @param ceph.mon.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
    ## @param ceph.mon.livenessProbe.periodSeconds Period seconds for livenessProbe
    ## @param ceph.mon.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
    ## @param ceph.mon.livenessProbe.failureThreshold Failure threshold for livenessProbe
    ## @param ceph.mon.livenessProbe.successThreshold Success threshold for livenessProbe
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: foo
      periodSeconds: bar
      timeoutSeconds: foo
      failureThreshold: bar
      successThreshold: foo
    ## @param ceph.mon.readinessProbe.enabled Enable readinessProbe on %%MAIN_CONTAINER_NAME%% containers
    ## @param ceph.mon.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
    ## @param ceph.mon.readinessProbe.periodSeconds Period seconds for readinessProbe
    ## @param ceph.mon.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
    ## @param ceph.mon.readinessProbe.failureThreshold Failure threshold for readinessProbe
    ## @param ceph.mon.readinessProbe.successThreshold Success threshold for readinessProbe
    ## note: podman not support readinessProbe currently
    ##
    readinessProbe:
      enabled: false
      initialDelaySeconds: foo
      periodSeconds: bar
      timeoutSeconds: foo
      failureThreshold: bar
      successThreshold: foo
    ## @param ceph.mon.startupProbe.enabled Enable startupProbe on %%MAIN_CONTAINER_NAME%% containers
    ## @param ceph.mon.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
    ## @param ceph.mon.startupProbe.periodSeconds Period seconds for startupProbe
    ## @param ceph.mon.startupProbe.timeoutSeconds Timeout seconds for startupProbe
    ## @param ceph.mon.startupProbe.failureThreshold Failure threshold for startupProbe
    ## @param ceph.mon.startupProbe.successThreshold Success threshold for startupProbe
    ##
    startupProbe:
      enabled: false
      initialDelaySeconds: foo
      periodSeconds: bar
      timeoutSeconds: foo
      failureThreshold: bar
      successThreshold: foo
    ## @param ceph.mon.customLivenessProbe Custom livenessProbe that overrides the default one
    ##
    customLivenessProbe: {}
    ## @param ceph.mon.customReadinessProbe Custom readinessProbe that overrides the default one
    ##
    customReadinessProbe: {}
    ## @param ceph.mon.customStartupProbe Custom startupProbe that overrides the default one
    ##
    customStartupProbe: {}
    ## %%MAIN_CONTAINER_NAME%% resource requests and limits
    ## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ## @param ceph.mon.resourcesPreset Set %%MAIN_CONTAINER_NAME%% container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if ceph.mon.resources is set (mon.resources is recommended for production).
    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    ##
    resourcesPreset: "nano"
    ## @param ceph.mon.resources Set %%MAIN_CONTAINER_NAME%% container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## Example:
    ## resources:
    ##   requests:
    ##     cpu: 2
    ##     memory: 512Mi
    ##   limits:
    ##     cpu: 3
    ##     memory: 1024Mi
    ##
    resources: {}
    ## Configure Container Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    ## ref: https://github.com/ceph/ceph-container/tree/main/src/daemon#ceph-osd-directory
    ## @param ceph.mon.containerSecurityContext.enabled Enabled %%MAIN_CONTAINER_NAME%% containers' Security Context
    ## @param ceph.mon.containerSecurityContext.runAsUser Set %%MAIN_CONTAINER_NAME%% containers' Security Context runAsUser
    ## @param ceph.mon.containerSecurityContext.runAsNonRoot Set %%MAIN_CONTAINER_NAME%% containers' Security Context runAsNonRoot
    ## @param ceph.mon.containerSecurityContext.readOnlyRootFilesystem Set %%MAIN_CONTAINER_NAME%% containers' Security Context runAsNonRoot
    ##
    containerSecurityContext:
      enabled: true
      runAsUser: 167
      runAsGroup: 167
      runAsNonRoot: true
      readOnlyRootFilesystem: false

    # %%OTHER_PARAMETERS_RELATED_TO_THIS_CONTAINER/POD%%

    ## @param ceph.mon.existingConfigmap The name of an existing ConfigMap with your custom configuration for %%MAIN_CONTAINER_NAME%%
    ##
    existingConfigmap:
    ## @param ceph.mon.command Override default container command (useful when using custom images)
    ##
    command: []
    ## @param ceph.mon.args Override default container args (useful when using custom images)
    ##
    args: []
    ## @param ceph.mon.extraEnvVars Array with extra environment variables to add to %%MAIN_CONTAINER_NAME%% nodes
    ## e.g:
    ## extraEnvVars:
    ##   - name: FOO
    ##     value: "bar"
    ##
    extraEnvVars: []
    ## @param ceph.mon.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for %%MAIN_CONTAINER_NAME%% nodes
    ##
    extraEnvVarsCM: ""
    ## @param ceph.mon.extraEnvVarsSecret Name of existing Secret containing extra env vars for %%MAIN_CONTAINER_NAME%% nodes
    ##
    extraEnvVarsSecret: ""
    ## @param ceph.mon.extraVolumes Optionally specify extra list of additional volumes for the %%MAIN_CONTAINER_NAME%% pod(s)
    ##
    extraVolumes: []
    ## @param ceph.mon.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the %%MAIN_CONTAINER_NAME%% container(s)
    ##
    extraVolumeMounts: []
    ## @param ceph.mon.sidecars Add additional sidecar containers to the %%MAIN_CONTAINER_NAME%% pod(s)
    ## e.g:
    ## sidecars:
    ##   - name: your-image-name
    ##     image: your-image
    ##     imagePullPolicy: Always
    ##     ports:
    ##       - name: portname
    ##         containerPort: 1234
    ##
    sidecars: []
    ## @param ceph.mon.initContainers Add additional init containers to the %%MAIN_CONTAINER_NAME%% pod(s)
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
    ## e.g:
    ## initContainers:
    ##  - name: your-image-name
    ##    image: your-image
    ##    imagePullPolicy: Always
    ##    command: ['sh', '-c', 'echo "hello world"']
    ##
    initContainers: []

## @section Persistence Parameters
##

## Enable persistence using Persistent Volume Claims
## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  ## @param persistence.enabled Enable persistence using Persistent Volume Claims
  ##
  enabled: true
  ## @param persistence.mountPath Path to mount the volume at.
  ##
  mountPath:
    ## @param persistence.mountPath.etc
    ## There is a ceph.defaults config file in the image that is used for defaults to bootstrap daemons. It will add the keys if they are not already present.
    ## You can either pre-populate the KV store with your own settings, or provide a ceph.defaults config file.
    ## To supply your own defaults, make sure to mount the /etc/ceph/ volume and place your ceph.defaults file there.
    etc: /etc/ceph
    ## @param persistence.mountPath.var
    ## The ceph mon will periodically store data into /var/lib/ceph, including the latest copy of the CRUSH map.
    ## If a mon restarts, it will attempt to download the latest monmap and CRUSH map from other peer monitors.
    ## However, if all mon daemons have gone down, monitors must be able to recover their previous maps.
    ## The docker volume used for /var/lib/ceph should be backed by some durable storage, and must be able to survive container and node restarts.
    ##
    var: /var/lib/ceph
  ## @param persistence.subPath The subdirectory of the volume to mount to, useful in dev environments and one PV for multiple services
  ##
  subPath: ""
  ## @param persistence.storageClass Storage class of backing PVC
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: ""
  ## @param persistence.annotations Persistent Volume Claim annotations
  ##
  annotations: {}
  ## @param persistence.accessModes Persistent Volume Access Modes
  ##
  accessModes:
    - ReadWriteOnce
  ## @param persistence.size Size of data volume
  ##
  size: 8Gi
  ## @param persistence.existingClaim The name of an existing PVC to use for persistence
  ##
  existingClaim: ""
## @section Init Container Parameters
##

## 'volumePermissions' init container parameters
## Changes the owner and group of the persistent volume mount point to runAsUser:fsGroup values
##   based on the *podSecurityContext/*containerSecurityContext parameters
##
volumePermissions:
  ## @param volumePermissions.enabled Enable init container that changes the owner/group of the PV mount point to `runAsUser:fsGroup`
  ##
  enabled: false
  ## OS Shell + Utility image
  ## ref: https://hub.docker.com/r/bitnami/os-shell/tags/
  ## @param volumePermissions.image.registry OS Shell + Utility image registry
  ## @param volumePermissions.image.repository OS Shell + Utility image repository
  ## @param volumePermissions.image.tag OS Shell + Utility image tag (immutable tags are recommended)
  ## @param volumePermissions.image.pullPolicy OS Shell + Utility image pull policy
  ## @param volumePermissions.image.pullSecrets OS Shell + Utility image pull secrets
  ##
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 11-debian-11-r%%IMAGE_REVISION%%
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## Init container's resource requests and limits
  ## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param volumePermissions.resourcesPreset Set init container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if volumePermissions.resources is set (volumePermissions.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param volumePermissions.resources Set init container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Init container Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param volumePermissions.containerSecurityContext.runAsUser Set init container's Security Context runAsUser
  ## NOTE: when runAsUser is set to special value "auto", init container will try to chown the
  ##   data folder to auto-determined user&group, using commands: `id -u`:`id -G | cut -d" " -f2`
  ##   "auto" is especially useful for OpenShift which has scc with dynamic user ids (and 0 is not allowed)
  ##
  containerSecurityContext:
    runAsUser: 0

## @section Other Parameters
##

## %%SUBCHART_CONTAINER/POD_DESCRIPTION%%
##
# %%SUBCHART_NAME%%:
SUBCHART_NAME:
  enabled: false
  # %%OTHER_PARAMETERS_RELATED_TO_THIS_SUBCHART%%
