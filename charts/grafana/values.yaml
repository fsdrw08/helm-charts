## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
##

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
## @param global.storageClass Global StorageClass for Persistent Volume(s)
##
global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  storageClass: ""

## @section Common parameters
##
## @param nameOverride String to partially override common.names.name
##
nameOverride: ""
## @param fullnameOverride String to fully override common.names.fullname
##
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}

## @param grafana.workloadKind specify the deploy kind： Pod, or Deployment
workloadKind: Pod
## @section grafana Parameters
##

## %%MAIN_CONTAINER/POD_DESCRIPTION%%
##
grafana:
  ## Grafana image
  ## ref: https://hub.docker.com/r/grafana/grafana/tags
  ## @param grafana.image.registry grafana image registry
  ## @param grafana.image.repository grafana image repository
  ## @param grafana.image.tag grafana image tag (immutable tags are recommended)
  ## @param grafana.image.digest grafana image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)
  ## @param grafana.image.pullPolicy grafana image pull policy
  ## @param grafana.image.pullSecrets grafana image pull secrets
  ##
  image:
    registry: docker.io
    repository: grafana/grafana
    tag: 12.1.1
    digest: ""
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## @param grafana.podRestartPolicy specify the pod restart policy if workloadKind set to Pod
  ## available options: Always, OnFailure, Never
  podRestartPolicy: Never
  ## @param grafana.replicaCount Number of %%MAIN_CONTAINER_NAME%% replicas to deploy
  ##
  replicaCount: 1
  ## @param grafana.containerPorts %%MAIN_CONTAINER_NAME%% container port to expose to host
  ## e.g.
  ## containerPorts:
  ##   - name: http
  ##     containerPort: 80
  ##     hostPort: 80
  ##     hostIP: 192.168.255.10
  ##     protocol: TCP
  ##   - name: https
  ##     containerPort: 443
  ##     hostPort: 443
  ##     hostIP: 192.168.255.10
  ##     protocol: TCP
  ##
  containerPorts:
    - name: http
      containerPort: 3000
      hostPort: 3000
      protocol: TCP
  ## Configure extra options for %%MAIN_CONTAINER_NAME%% containers' liveness and readiness probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param grafana.livenessProbe.enabled Enable livenessProbe on %%MAIN_CONTAINER_NAME%% containers
  ## @param grafana.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param grafana.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param grafana.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param grafana.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param grafana.livenessProbe.successThreshold Success threshold for livenessProbe
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 3
    periodSeconds: 600
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    httpGet:
      path: /api/health
      port: 3000
  ## @param grafana.readinessProbe.enabled Enable readinessProbe on %%MAIN_CONTAINER_NAME%% containers
  ## @param grafana.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param grafana.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param grafana.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param grafana.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param grafana.readinessProbe.successThreshold Success threshold for readinessProbe
  ## note: podman not support readinessProbe currently
  ##
  readinessProbe:
    enabled: false
    initialDelaySeconds: foo
    periodSeconds: bar
    timeoutSeconds: foo
    failureThreshold: bar
    successThreshold: foo
  ## @param grafana.startupProbe.enabled Enable startupProbe on %%MAIN_CONTAINER_NAME%% containers
  ## @param grafana.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
  ## @param grafana.startupProbe.periodSeconds Period seconds for startupProbe
  ## @param grafana.startupProbe.timeoutSeconds Timeout seconds for startupProbe
  ## @param grafana.startupProbe.failureThreshold Failure threshold for startupProbe
  ## @param grafana.startupProbe.successThreshold Success threshold for startupProbe
  ##
  startupProbe:
    enabled: false
    initialDelaySeconds: foo
    periodSeconds: bar
    timeoutSeconds: foo
    failureThreshold: bar
    successThreshold: foo
  ## @param grafana.customLivenessProbe Custom livenessProbe that overrides the default one
  ##
  customLivenessProbe: {}
  ## @param grafana.customReadinessProbe Custom readinessProbe that overrides the default one
  ##
  customReadinessProbe: {}
  ## @param grafana.customStartupProbe Custom startupProbe that overrides the default one
  ##
  customStartupProbe: {}
  ## %%MAIN_CONTAINER_NAME%% resource requests and limits
  ## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param grafana.resourcesPreset Set %%MAIN_CONTAINER_NAME%% container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if grafana.resources is set (grafana.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param grafana.resources Set %%MAIN_CONTAINER_NAME%% container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Configure Pods Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param grafana.podSecurityContext.enabled Enabled %%MAIN_CONTAINER_NAME%% pods' Security Context
  ## @param grafana.podSecurityContext.fsGroup Set %%MAIN_CONTAINER_NAME%% pod's Security Context fsGroup
  ## note: podman kube play does not support fsGroup yet
  ##
  podSecurityContext:
    enabled: false
    # fsGroup: 1001
  ## Configure Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param grafana.containerSecurityContext.enabled Enabled %%MAIN_CONTAINER_NAME%% containers' Security Context
  ## @param grafana.containerSecurityContext.runAsUser Set %%MAIN_CONTAINER_NAME%% containers' Security Context runAsUser
  ## @param grafana.containerSecurityContext.runAsNonRoot Set %%MAIN_CONTAINER_NAME%% containers' Security Context runAsNonRoot
  ## @param grafana.containerSecurityContext.readOnlyRootFilesystem Set %%MAIN_CONTAINER_NAME%% containers' Security Context runAsNonRoot
  ## ref: https://github.com/grafana/grafana/blob/v12.1.1/Dockerfile#L129
  ##
  containerSecurityContext:
    enabled: true
    runAsUser: 472
    runAsGroup: 0
    runAsNonRoot: true
    readOnlyRootFilesystem: false

  # %%OTHER_PARAMETERS_RELATED_TO_THIS_CONTAINER/POD%%

  ## @param grafana.configFiles grafana configuration files include custom (grafana.ini), datasource
  ##
  configFiles:
    ## @param grafana.configFiles.custom custom configuration file which will place in /etc/grafana/grafana.ini
    ## you can add whatever config under this block according to https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#variable-expansion
    ## ref: https://github.com/grafana/grafana/blob/v12.1.1/conf/defaults.ini
    ##
    grafana:
      ## @param grafana.configFile.custome.app_mode Options are production and development. Default is production.
      ## Don’t change this option unless you are working on Grafana development.
      ##
      app_mode: production
      ## @param grafana.configFiles.custom.paths config under [paths]
      ## ref: https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#paths
      ##
      paths:
        ## @param grafana.configFiles.custom.paths.data Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is used)
        ##
        data: /var/lib/grafana
        ## @param grafana.configFiles.custom.paths.logs Directory where grafana can store logs
        ##
        logs: /var/log/grafana
        ## @param grafana.configFiles.custom.paths.plugins Directory where grafana will automatically scan and look for plugins
        ##
        plugins: /var/lib/grafana/plugins
        ## @param grafana.configFiles.custom.paths.provisioning folder that contains provisioning config files that grafana will apply on startup and while running.
        ##
        provisioning: /etc/grafana/provisioning
        ## @param grafana.configFiles.custom.paths.temp_data_lifetime Temporary files in `data` directory older than given duration will be removed
        ##
        temp_data_lifetime: 24h
      ## @param grafana.configFiles.custom.analytics usage analytics
      ## ref: https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#analytics
      ##
      analytics:
        ## @param grafana.configFiles.custom.analytics.check_for_updates Set to false to disable all checks to https://grafana.com
        ## for new versions of grafana. The check is used in some UI views to notify that a grafana update exists.
        ## This option does not cause any auto updates, nor send any information only a GET request to https://grafana.com/api/grafana/versions/stable to get the latest version.
        ##
        check_for_updates: true
      ## @param grafana.configFiles.custom.log Grafana logging options
      ## ref: https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#log
      ##
      log:
        ## @param grafana.configFiles.custom.log.mode Options are console, file, and syslog.
        ## Default is console and file. Use spaces to separate multiple modes, for example, console file.
        ##
        mode: console
    ## @param grafana.configFiles.dataSource Configure grafana datasources
    ## configs under this block will place under {{ .Value.grafana.configFiles.custom.paths.provisioning }}/datasources/
    ## by default: /etc/grafana/provisioning/datasources/
    ## ref: https://grafana.com/docs/grafana/latest/administration/provisioning/#datasources
    ## ref: https://github.com/grafana/helm-charts/blob/main/charts/grafana/templates/_pod.tpl#L1027-L1039
    ## e.g.
    ## dataSource
    ##   datasources.yaml:
    ##     apiVersion: 1
    ##     datasources:
    ##       - name: victoriametrics
    ##         type: prometheus
    ##         orgId: 1
    ##         url: http://vmsingle-victoria-metrics-single-server.default.svc.cluster.local:8428
    ##         access: proxy
    ##         isDefault: true
    ##         updateIntervalSeconds: 10
    ##         editable: true
    ##
    dataSource: {}
    ## @param grafana.configFiles.ldap Grafana's LDAP configuration
    ## by default, the ldap config will place in /etc/grafana/ldap.toml
    ## ref: https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/ldap/
    ## ref: https://github.com/grafana/grafana/blob/v12.1.1/conf/defaults.ini#L945C15-L945C37
    ## e.g.
    ## ldap:
    ##   servers:
    ##     - # Ldap server host (specify multiple hosts space separated)
    ##       host: "ldap.my_secure_remote_server.org"
    ##       # Default port is 389 or 636 if use_ssl: true
    ##       port: 636
    ##       # Set to true if LDAP server should use an encrypted TLS connection (either with STARTTLS or LDAPS)
    ##       use_ssl: true
    ##       # If set to true, use LDAP with STARTTLS instead of LDAPS
    ##       start_tls: false
    ##       # The value of an accepted TLS cipher. By default, this value is empty. Example value: ["TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"])
    ##       # For a complete list of supported ciphers and TLS versions, refer to: https://go.dev/src/crypto/tls/cipher_suites.go
    ##       # Starting with Grafana v11.0 only ciphers with ECDHE support are accepted for TLS 1.2 connections.
    ##       tls_ciphers: []
    ##       # This is the minimum TLS version allowed. By default, this value is empty. Accepted values are: TLS1.1 (only for Grafana v10.4 or earlier), TLS1.2, TLS1.3.
    ##       min_tls_version: ""
    ##       # set to true if you want to skip SSL cert validation
    ##       ssl_skip_verify: false
    ##       # set to the path to your root CA certificate or leave unset to use system defaults
    ##       # root_ca_cert: "/path/to/certificate.crt"
    ##       # Authentication against LDAP servers requiring client certificates
    ##       # client_cert: "/path/to/client.crt"
    ##       # client_key: "/path/to/client.key"
    ##       # Search user bind dn
    ##       bind_dn: "cn=admin,dc=grafana,dc=org"
    ##       # Search user bind password
    ##       # If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
    ##       bind_password: "grafana"
    ##       # We recommend using variable expansion for the bind_password, for more info https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#variable-expansion
    ##       # bind_password: '$__env{LDAP_BIND_PASSWORD}'
    ##       # Timeout in seconds. Applies to each host specified in the 'host' entry (space separated).
    ##       timeout: 10
    ##       # User search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)"
    ##       # Allow login from email or username, example "(|(sAMAccountName=%s)(userPrincipalName=%s))"
    ##       search_filter: "(cn=%s)"
    ##       # An array of base dns to search through
    ##       search_base_dns: ["dc=grafana,dc=org"]
    ##       # group_search_filter: "(&(objectClass=posixGroup)(memberUid=%s))"
    ##       # group_search_filter_user_attribute: "distinguishedName"
    ##       # group_search_base_dns: ["ou=groups,dc=grafana,dc=org"]
    ##       # Specify names of the LDAP attributes your LDAP uses
    ##       attributes:
    ##         member_of: "memberOf"
    ##         email: "email"
    ldap: {}

  ## @param grafana.tls secret setting of cert and key or whatever tls content will set in the container
  ##
  tls:
    ## @param grafana.tls.mountPath secret mount path (dir) setting of cert and key or whatever tls content will set in the container
    ## this config should match with config under grafana.configFile.server.cert_key and grafana.configFile.server.cert_file if any
    ##
    mountPath: /etc/grafana/certs
    ## @param grafana.tls.contents secret content of cert and key or whatever tls content will set in the container
    ## You can set the content key as whatever file name you like
    ## But the tls set in configFiles above must match with the settings here
    ## key and certificate should start with -----BEGIN CERTIFICATE----- or -----BEGIN RSA PRIVATE KEY-----
    ## e.g.
    ## contents:
    ##  grafana.crt: ""
    ##  grafana.key: ""
    ##
    contents: {}
  ## @param grafana.existingConfigmap The name of an existing ConfigMap with your custom configuration for %%MAIN_CONTAINER_NAME%%
  ##
  existingConfigmap:
  ## @param grafana.command Override default container command (useful when using custom images)
  ##
  command: []
  ## @param grafana.args Override default container args (useful when using custom images)
  ##
  args: []
  ## @param grafana.hostAliases %%MAIN_CONTAINER_NAME%% pods host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param grafana.podLabels Extra labels for %%MAIN_CONTAINER_NAME%% pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param grafana.podAnnotations Annotations for %%MAIN_CONTAINER_NAME%% pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations:
    io.podman.annotations.userns: keep-id:uid=472,gid=0
  ## Autoscaling configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  ## @param grafana.autoscaling.enabled Enable autoscaling for grafana
  ## @param grafana.autoscaling.minReplicas Minimum number of grafana replicas
  ## @param grafana.autoscaling.maxReplicas Maximum number of grafana replicas
  ## @param grafana.autoscaling.targetCPU Target CPU utilization percentage
  ## @param grafana.autoscaling.targetMemory Target Memory utilization percentage
  ##
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""

  ## @param grafana.extraEnvVars Array with extra environment variables to add to %%MAIN_CONTAINER_NAME%% nodes
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param grafana.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for %%MAIN_CONTAINER_NAME%% nodes
  ##
  extraEnvVarsCM: ""
  ## @param grafana.extraEnvVarsSecret Name of existing Secret containing extra env vars for %%MAIN_CONTAINER_NAME%% nodes
  ##
  extraEnvVarsSecret: ""
  ## @param grafana.extraVolumes Optionally specify extra list of additional volumes for the %%MAIN_CONTAINER_NAME%% pod(s)
  ##
  extraVolumes: []
  ## @param grafana.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the %%MAIN_CONTAINER_NAME%% container(s)
  ##
  extraVolumeMounts: []
  ## @param grafana.sidecars Add additional sidecar containers to the %%MAIN_CONTAINER_NAME%% pod(s)
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: []
  ## @param grafana.initContainers Add additional init containers to the %%MAIN_CONTAINER_NAME%% pod(s)
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']
  ##
  initContainers: []

## @section Persistence Parameters
##

## Enable persistence using Persistent Volume Claims
## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  ## @param persistence.enabled Enable persistence using Persistent Volume Claims
  ##
  enabled: true
  ## @param persistence.mountPath Path to mount the volume at.
  ##
  # mountPath: /bitnami/grafana/data
  ## @param persistence.subPath The subdirectory of the volume to mount to, useful in dev environments and one PV for multiple services
  ##
  subPath: ""
  ## @param persistence.storageClass Storage class of backing PVC
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: ""
  ## @param persistence.annotations Persistent Volume Claim annotations
  ##
  annotations: {}
  ## @param persistence.accessModes Persistent Volume Access Modes
  ##
  accessModes:
    - ReadWriteOnce
  ## @param persistence.size Size of data volume
  ##
  size: 8Gi
  ## @param persistence.existingClaim The name of an existing PVC to use for persistence
  ##
  existingClaim: ""
## @section Init Container Parameters
##

## 'volumePermissions' init container parameters
## Changes the owner and group of the persistent volume mount point to runAsUser:fsGroup values
##   based on the *podSecurityContext/*containerSecurityContext parameters
##
volumePermissions:
  ## @param volumePermissions.enabled Enable init container that changes the owner/group of the PV mount point to `runAsUser:fsGroup`
  ##
  enabled: false
  ## OS Shell + Utility image
  ## ref: https://hub.docker.com/r/bitnami/os-shell/tags/
  ## @param volumePermissions.image.registry OS Shell + Utility image registry
  ## @param volumePermissions.image.repository OS Shell + Utility image repository
  ## @param volumePermissions.image.tag OS Shell + Utility image tag (immutable tags are recommended)
  ## @param volumePermissions.image.pullPolicy OS Shell + Utility image pull policy
  ## @param volumePermissions.image.pullSecrets OS Shell + Utility image pull secrets
  ##
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 11-debian-11-r%%IMAGE_REVISION%%
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## Init container's resource requests and limits
  ## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param volumePermissions.resourcesPreset Set init container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if volumePermissions.resources is set (volumePermissions.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param volumePermissions.resources Set init container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Init container Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param volumePermissions.containerSecurityContext.runAsUser Set init container's Security Context runAsUser
  ## NOTE: when runAsUser is set to special value "auto", init container will try to chown the
  ##   data folder to auto-determined user&group, using commands: `id -u`:`id -G | cut -d" " -f2`
  ##   "auto" is especially useful for OpenShift which has scc with dynamic user ids (and 0 is not allowed)
  ##
  containerSecurityContext:
    runAsUser: 0

## @section Other Parameters
##

## %%SUBCHART_CONTAINER/POD_DESCRIPTION%%
##
# %%SUBCHART_NAME%%:
SUBCHART_NAME:
  enabled: false
  # %%OTHER_PARAMETERS_RELATED_TO_THIS_SUBCHART%%
