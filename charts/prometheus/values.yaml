## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
##

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
## @param global.storageClass Global StorageClass for Persistent Volume(s)
##
global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  storageClass: ""

## @section Common parameters
##
## @param nameOverride String to partially override common.names.name
##
nameOverride: ""
## @param fullnameOverride String to fully override common.names.fullname
##
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}

## @param prometheus.workloadKind specify the deploy kindï¼š Pod, or Deployment
workloadKind: Pod
## @section prometheus Parameters
##

## %%MAIN_CONTAINER/POD_DESCRIPTION%%
##
prometheus:
  ## @param prometheus.podRestartPolicy specify the pod restart policy if workloadKind set to Pod
  ## available options: Always, OnFailure, Never
  podRestartPolicy: Never
  ## @param prometheus.replicaCount Number of %%MAIN_CONTAINER_NAME%% replicas to deploy
  ##
  replicaCount: 1
  ## Configure Pods Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param prometheus.podSecurityContext.enabled Enabled %%MAIN_CONTAINER_NAME%% pods' Security Context
  ## @param prometheus.podSecurityContext.fsGroup Set %%MAIN_CONTAINER_NAME%% pod's Security Context fsGroup
  ## note: podman kube play does not support fsGroup yet
  ##
  podSecurityContext:
    enabled: false
    # fsGroup: 1001
  ## @param prometheus.hostAliases %%MAIN_CONTAINER_NAME%% pods host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param prometheus.podLabels Extra labels for %%MAIN_CONTAINER_NAME%% pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param prometheus.podAnnotations Annotations for %%MAIN_CONTAINER_NAME%% pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}
  ## Autoscaling configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  ## @param prometheus.autoscaling.enabled Enable autoscaling for prometheus
  ## @param prometheus.autoscaling.minReplicas Minimum number of prometheus replicas
  ## @param prometheus.autoscaling.maxReplicas Maximum number of prometheus replicas
  ## @param prometheus.autoscaling.targetCPU Target CPU utilization percentage
  ## @param prometheus.autoscaling.targetMemory Target Memory utilization percentage
  ##
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
  ## @param prometheus.extraVolumes Optionally specify extra list of additional volumes for the %%MAIN_CONTAINER_NAME%% pod(s)
  ##
  extraVolumes: []
  ## @param prometheus.initContainers Add additional init containers to the %%MAIN_CONTAINER_NAME%% pod(s)
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']
  ##
  initContainers: []
  ## @param prometheus.sidecars Add additional sidecar containers to the %%MAIN_CONTAINER_NAME%% pod(s)
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: []
  containers:
    ## @param prometheus.containers.server prometheus server container configuration
    server:
      ## @param prometheus.containers.auth.enabled present this container in the pod
      enabled: true
      ## prometheus image
      ## ref: https://quay.io/repository/prometheus/prometheus?tab=tags
      ## @param prometheus.containers.server.image.registry prometheus image registry
      ## @param prometheus.containers.server.image.repository prometheus image repository
      ## @param prometheus.containers.server.image.tag prometheus image tag (immutable tags are recommended)
      ## @param prometheus.containers.server.image.digest prometheus image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)
      ## @param prometheus.containers.server.image.pullPolicy prometheus image pull policy
      ## @param prometheus.containers.server.image.pullSecrets prometheus image pull secrets
      ##
      image:
        registry: quay.io
        repository: prometheus/prometheus
        tag: v3.4.1
        digest: ""
        ## Specify a imagePullPolicy
        ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
        ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
        ##
        pullPolicy: IfNotPresent
        ## Optionally specify an array of imagePullSecrets.
        ## Secrets must be manually created in the namespace.
        ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
        ## e.g:
        ## pullSecrets:
        ##   - myRegistryKeySecretName
        ##
        pullSecrets: []
      ## @param prometheus.containers.server.containerPorts %%MAIN_CONTAINER_NAME%% container port to expose to host
      ## e.g.
      ## containerPorts:
      ##   - name: http
      ##     containerPort: 80
      ##     hostPort: 80
      ##     hostIP: 192.168.255.10
      ##     protocol: TCP
      ##   - name: https
      ##     containerPort: 443
      ##     hostPort: 443
      ##     hostIP: 192.168.255.10
      ##     protocol: TCP
      ##
      containerPorts:
        - name: http
          containerPort: 9090
          hostPort: 9090
          protocol: TCP
      ## Configure extra options for %%MAIN_CONTAINER_NAME%% containers' liveness and readiness probes
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
      ## @param prometheus.containers.server.livenessProbe.enabled Enable livenessProbe on %%MAIN_CONTAINER_NAME%% containers
      ## @param prometheus.containers.server.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
      ## @param prometheus.containers.server.livenessProbe.periodSeconds Period seconds for livenessProbe
      ## @param prometheus.containers.server.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
      ## @param prometheus.containers.server.livenessProbe.failureThreshold Failure threshold for livenessProbe
      ## @param prometheus.containers.server.livenessProbe.successThreshold Success threshold for livenessProbe
      ##
      livenessProbe:
        enabled: true
        initialDelaySeconds: 3
        periodSeconds: 600
        timeoutSeconds: 5
        failureThreshold: 3
        successThreshold: 1
        exec:
          command:
            - sh
            - -c
            - |
              wget --quiet --tries=1 --output-document=- http://localhost:9090/-/healthy | grep -q -w Healthy
      ## @param prometheus.containers.server.readinessProbe.enabled Enable readinessProbe on %%MAIN_CONTAINER_NAME%% containers
      ## @param prometheus.containers.server.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
      ## @param prometheus.containers.server.readinessProbe.periodSeconds Period seconds for readinessProbe
      ## @param prometheus.containers.server.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
      ## @param prometheus.containers.server.readinessProbe.failureThreshold Failure threshold for readinessProbe
      ## @param prometheus.containers.server.readinessProbe.successThreshold Success threshold for readinessProbe
      ## note: podman not support readinessProbe currently
      ##
      readinessProbe:
        enabled: false
        initialDelaySeconds: foo
        periodSeconds: bar
        timeoutSeconds: foo
        failureThreshold: bar
        successThreshold: foo
      ## @param prometheus.containers.server.startupProbe.enabled Enable startupProbe on %%MAIN_CONTAINER_NAME%% containers
      ## @param prometheus.containers.server.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
      ## @param prometheus.containers.server.startupProbe.periodSeconds Period seconds for startupProbe
      ## @param prometheus.containers.server.startupProbe.timeoutSeconds Timeout seconds for startupProbe
      ## @param prometheus.containers.server.startupProbe.failureThreshold Failure threshold for startupProbe
      ## @param prometheus.containers.server.startupProbe.successThreshold Success threshold for startupProbe
      ##
      startupProbe:
        enabled: false
        initialDelaySeconds: foo
        periodSeconds: bar
        timeoutSeconds: foo
        failureThreshold: bar
        successThreshold: foo
      ## @param prometheus.containers.server.customLivenessProbe Custom livenessProbe that overrides the default one
      ##
      customLivenessProbe: {}
      ## @param prometheus.containers.server.customReadinessProbe Custom readinessProbe that overrides the default one
      ##
      customReadinessProbe: {}
      ## @param prometheus.containers.server.customStartupProbe Custom startupProbe that overrides the default one
      ##
      customStartupProbe: {}
      ## %%MAIN_CONTAINER_NAME%% resource requests and limits
      ## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
      ## @param prometheus.containers.server.resourcesPreset Set %%MAIN_CONTAINER_NAME%% container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if prometheus.containers.server.resources is set (prometheus.resources is recommended for production).
      ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
      ##
      resourcesPreset: "nano"
      ## @param prometheus.containers.server.resources Set %%MAIN_CONTAINER_NAME%% container requests and limits for different resources like CPU or memory (essential for production workloads)
      ## Example:
      ## resources:
      ##   requests:
      ##     cpu: 2
      ##     memory: 512Mi
      ##   limits:
      ##     cpu: 3
      ##     memory: 1024Mi
      ##
      resources: {}
      ## Configure Container Security Context
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
      ## @param prometheus.containers.server.containerSecurityContext.enabled Enabled %%MAIN_CONTAINER_NAME%% containers' Security Context
      ## @param prometheus.containers.server.containerSecurityContext.runAsUser Set %%MAIN_CONTAINER_NAME%% containers' Security Context runAsUser
      ## @param prometheus.containers.server.containerSecurityContext.runAsNonRoot Set %%MAIN_CONTAINER_NAME%% containers' Security Context runAsNonRoot
      ## @param prometheus.containers.server.containerSecurityContext.readOnlyRootFilesystem Set %%MAIN_CONTAINER_NAME%% containers' Security Context runAsNonRoot
      ##
      containerSecurityContext:
        enabled: false
        runAsUser: 1001
        runAsNonRoot: true
        readOnlyRootFilesystem: false

      # %%OTHER_PARAMETERS_RELATED_TO_THIS_CONTAINER/POD%%
      configFiles:
        ## @param prometheus.containers.server.configFiles.main the configuration file defines everything related to scraping jobs and their instances, as well as which rule files to load.
        ## The config file will presents in the path which specify in prometheus.containers.server.flags.config.file, default: /etc/prometheus/prometheus.yml
        ## ref: https://github.com/prometheus/prometheus/blob/v3.4.0/documentation/examples/prometheus.yml
        ## ref: https://prometheus.io/docs/prometheus/3.4/configuration/configuration/
        ##
        main:
          ## @param prometheus.containers.server.configFiles.main.global The global configuration specifies parameters that are valid in all other configuration contexts.
          ## They also serve as defaults for other configuration sections.
          ##
          global:
            scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
            evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
            # scrape_timeout is set to the global default (10s).
          ## @param prometheus.containers.server.configFiles.main.alerting Alerting specifies settings related to the Alertmanager
          ## ref: https://prometheus.io/docs/prometheus/3.4/configuration/configuration/#alertmanager_config
          ##
          alerting:
            alertmanagers:
              - static_configs:
                  - targets:
                    # - alertmanager:9093
          ## @param prometheus.containers.server.configFiles.main.rule_files Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
          ##
          rule_files:
            # - "first_rules.yml"
            # - "second_rules.yml"
          ## @param prometheus.containers.server.configFiles.main.scrape_configs A scrape configuration containing exactly one endpoint to scrape:
          ## ref: https://prometheus.io/docs/prometheus/3.4/configuration/configuration/#scrape_config
          ##
          scrape_configs:
            ## Here it's Prometheus itself.
            ## The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
            - job_name: prometheus
              metrics_path: /metrics # defaults to '/metrics'
              scheme: http # defaults to 'http'.

              static_configs:
                - targets: ["localhost:9090"]
                  # The label name is added as a label `label_name=<label_value>` to any timeseries scraped from this config.
                  labels:
                    app: "prometheus"
        ## @param prometheus.containers.server.configFiles.web basic authentication and TLS config
        ## The config file will presents in the path which specify in prometheus.containers.server.flags.web.config.file, default: /etc/prometheus/web.yml
        ## ref: https://prometheus.io/docs/prometheus/3.4/configuration/https/
        ## e.g.
        ## web:
        ##  tls_server_config:
        ##    cert_file: /etc/prometheus/certs/prometheus.crt
        ##    key_file: /etc/prometheus/certs/prometheus.key
        ##
        web: {}

      ## @param prometheus.containers.server.existingConfigmap The name of an existing ConfigMap with your custom configuration for %%MAIN_CONTAINER_NAME%%
      ##
      existingConfigmap:
      ## @param prometheus.containers.server.tls secret setting of cert and key or whatever tls content will set in the container
      ##
      tls:
        ## @param prometheus.containers.server.tls.mountPath secret mount path (dir) setting of cert and key or whatever tls content will set in the container
        ## this config should match with config under grafana.configFile.server.cert_key and grafana.configFile.server.cert_file if any
        ##
        mountPath: /etc/prometheus/certs
        ## @param prometheus.containers.server.tls.contents secret content of cert and key or whatever tls content will set in the container
        ## You can set the content key as whatever file name you like
        ## But the tls set in configFiles above must match with the settings here
        ## key and certificate should start with -----BEGIN CERTIFICATE----- or -----BEGIN RSA PRIVATE KEY-----
        ## e.g.
        ## contents:
        ##  ca.crt: ""
        ##  prometheus.containers.server.crt: ""
        ##  prometheus.containers.server.key: ""
        ##
        contents: {}
      ## @param prometheus.containers.server.command Override default container command (useful when using custom images)
      ##
      command: []
      ## @param prometheus.containers.server.flags flags for `prometheus` command
      ## ref: https://prometheus.io/docs/prometheus/3.4/command-line/prometheus/
      ##
      flags:
        ## @param prometheus.containers.server.flags.agent Run Prometheus in 'Agent mode'.
        ##
        agent: false
        alertmanager:
          ## @param prometheus.containers.server.flags.alertmanager.notification-queue-capacity The capacity of the queue for pending Alertmanager notifications.
          ## Use with server mode only.
          ##
          notification-queue-capacity: 10000
          ## @param prometheus.containers.server.flags.alertmanager.notification-batch-size The maximum number of notifications per batch to send to the Alertmanager.
          ## Use with server mode only.
          ##
          notification-batch-size: 256
          ## @param prometheus.containers.server.flags.alertmanager.drain-notification-queue-on-shutdown Send any outstanding Alertmanager notifications when shutting down.
          ## If false, any outstanding Alertmanager notifications will be dropped when shutting down.
          ## Use with server mode only.
          ##
          drain-notification-queue-on-shutdown: true
        ## @param prometheus.containers.server.flags.auto-gomaxprocs Automatically set GOMAXPROCS to match Linux container CPU quota
        ##
        auto-gomaxprocs: true
        ## @param prometheus.containers.server.flags.auto-gomemlimit Automatically set GOMEMLIMIT to match Linux container or system memory limit
        ##
        auto-gomemlimit: true
        ## @param prometheus.containers.server.flags.auto-gomemlimit.ratio The ratio of reserved GOMEMLIMIT memory to the detected maximum container or system memory 0.9
        ##
        auto-gomemlimit.ratio:
        config:
          ## @param prometheus.containers.server.flags.config.file Prometheus configuration file path.
          ##
          file: /etc/prometheus/prometheus.yml
          ## @param prometheus.containers.server.flags.config.auto-reload-interval Specifies the interval for checking and automatically reloading the Prometheus configuration file upon detecting changes.
          ##
          auto-reload-interval: 30s
        ## @param prometheus.containers.server.flags.enable-feature Comma separated feature names to enable. Valid options:
        ## exemplar-storage, expand-external-labels, memory-snapshot-on-shutdown, promql-per-step-stats, promql-experimental-functions,
        ## extra-scrape-metrics, auto-gomaxprocs, native-histograms, created-timestamp-zero-ingestion, concurrent-rule-eval, delayed-compaction,
        ## old-ui, otlp-deltatocumulative, promql-duration-expr.
        ## See https://prometheus.io/docs/prometheus/latest/feature_flags/ for more details.
        ##
        enable-feature:
        log:
          ## @param prometheus.containers.server.flags.log.level Only log messages with the given severity or above. One of: [debug, info, warn, error]
          ##
          level: info
          ## @param prometheus.containers.server.flags.log.format Output format of log messages. One of: [logfmt, json]
          ##
          format: logfmt
        query:
          ## @param prometheus.containers.server.flags.query.lookback-delta The maximum lookback duration for retrieving metrics during expression evaluations and federation.
          ## Use with server mode only. 5m
          ##
          lookback-delta: 5m
          ## @param prometheus.containers.server.flags.query.timeout Maximum time a query may take before being aborted.
          ## Use with server mode only.
          ##
          timeout: 2m
          ## @param prometheus.containers.server.flags.query.max-concurrency Maximum number of queries executed concurrently.
          ## Use with server mode only.
          ##
          max-concurrency: 20
          ## @param prometheus.containers.server.flags.query.max-samples Maximum number of samples a single query can load into memory.
          ## Note that queries will fail if they try to load more samples than this into memory, so this also limits the number of samples a query can return.
          ## Use with server mode only.
          ##
          max-samples: 50000000
        rules:
          alert:
            ## @param prometheus.containers.server.flags.rules.alert.for-outage-tolerance Max time to tolerate prometheus outage for restoring "for" state of alert. Use with server mode only.
            ##
            for-outage-tolerance: 1h
            ## @param prometheus.containers.server.flags.rules.alert.for-grace-period Minimum duration between alert and restored "for" state. This is maintained only for alerts with configured "for" time greater than grace period.
            ## Use with server mode only.
            ##
            for-grace-period: 10m
            ## @param prometheus.containers.server.flags.rules.alert.resend-delay Minimum amount of time to wait before resending an alert to Alertmanager.
            ## Use with server mode only.
            ##
            resend-delay: 1m
          ## @param prometheus.containers.server.flags.rules.max-concurrent-evals Global concurrency limit for independent rules that can run concurrently. When set, "query.max-concurrency" may need to be adjusted accordingly.
          ## Use with server mode only.
          ##
          max-concurrent-evals: 4
        storage:
          tsdb:
            ## @param prometheus.containers.server.flags.storage.tsdb.path Base path for metrics storage. Use with server mode only.
            ##
            path: /prometheus
            retention:
              ## @param prometheus.containers.server.flags.storage.tsdb.retention.time How long to retain samples in storage.
              ## If neither this flag nor "storage.tsdb.retention.size" is set, the retention time defaults to 15d.
              ## Units Supported: y, w, d, h, m, s, ms. Use with server mode only.
              ##
              time:
              ## @param prometheus.containers.server.flags.storage.tsdb.retention.size Maximum number of bytes that can be stored for blocks.
              ## A unit is required, supported units: B, KB, MB, GB, TB, PB, EB. Ex: "512MB".
              ## Based on powers-of-2, so 1KB is 1024B. Use with server mode only.
              ##
              size:
            ## @param prometheus.containers.server.flags.storage.tsdb.no-lockfile Do not create lockfile in data directory. Use with server mode only.
            ##
            no-lockfile: false
            ## @param prometheus.containers.server.flags.storage.tsdb.head-chunks-write-queue-size Size of the queue through which head chunks are written to the disk to be m-mapped, 0 disables the queue completely. Experimental. Use with server mode only.
            ##
            head-chunks-write-queue-size: 0
          agent:
            ## @param prometheus.containers.server.flags.storage.agent.path Base path for metrics storage. Use with agent mode only.
            ##
            path: # data-agent/
            ## @param prometheus.containers.server.flags.storage.agent.wal-compression Compress the agent WAL. If false, the --storage.agent.wal-compression-type flag is ignored.
            ## Use with agent mode only.
            ##
            wal-compression: # true
            retention:
              ## @param prometheus.containers.server.flags.storage.agent.retention.min-time Minimum age samples may be before being considered for deletion when the WAL is truncated.
              ## Use with agent mode only.
              ##
              min-time:
              ## @param prometheus.containers.server.flags.storage.agent.retention.max-time Maximum age samples may be before being forcibly deleted when the WAL is truncated.
              ## Use with agent mode only.
              ##
              max-time:
            ## @param prometheus.containers.server.flags.storage.agent.no-lockfile Do not create lockfile in data directory. Use with agent mode only.
            ##
            no-lockfile: # false
          remote:
            ## @param prometheus.containers.server.flags.storage.remote.flush-deadline How long to wait flushing sample on shutdown or config reload.
            ##
            flush-deadline: 1m
            ## @param prometheus.containers.server.flags.storage.remote.read-sample-limit Maximum overall number of samples to return via the remote read interface, in a single query.
            ## 0 means no limit. This limit is ignored for streamed response types. Use with server mode only.
            ##
            read-sample-limit: 5e7
            ## @param prometheus.containers.server.flags.storage.remote.read-concurrent-limit Maximum number of concurrent remote read calls.
            ## 0 means no limit. Use with server mode only.
            ##
            read-concurrent-limit: 10
            ## @param prometheus.containers.server.flags.storage.remote.read-max-bytes-in-frame Maximum number of bytes in a single frame for streaming remote read response types before marshalling.
            ## Note that client might have limit on frame size as well. 1MB as recommended by protobuf by default. Use with server mode only.
            ##
            read-max-bytes-in-frame: 1048576
        web:
          ## @param prometheus.containers.server.flags.web.listen-address Address to listen on for UI, API, and telemetry. Can be repeated.
          ##
          listen-address: 0.0.0.0:9090
          config:
            ## @param prometheus.containers.server.flags.web.config.file [EXPERIMENTAL] Path to configuration file that can enable TLS or authentication.
            ##
            file: # /etc/prometheus/web.yml
          ## @param prometheus.containers.server.flags.web.read-timeout Maximum duration before timing out read of the request, and closing idle connections.
          ##
          read-timeout: 5m
          ## @param prometheus.containers.server.flags.web.max-connections Maximum number of simultaneous connections across all listeners.
          ##
          max-connections: 512
          ## @param prometheus.containers.server.flags.web.max-notifications-subscribers Limits the maximum number of subscribers that can concurrently receive live notifications.
          ## If the limit is reached, new subscription requests will be denied until existing connections close.
          ##
          max-notifications-subscribers: 16
          ## @param prometheus.containers.server.flags.web.external-url The URL under which Prometheus is externally reachable (for example, if Prometheus is served via a reverse proxy).
          ## Used for generating relative and absolute links back to Prometheus itself. If the URL has a path portion, it will be used to prefix all HTTP endpoints served by prometheus.containers.server.
          ## If omitted, relevant URL components will be derived automatically.
          ##
          external-url:
          ## @param prometheus.containers.server.flags.web.route-prefix Prefix for the internal routes of web endpoints. Defaults to path of --web.external-url.
          ##
          route-prefix:
          ## @param prometheus.containers.server.flags.web.user-assets Path to static asset directory, available at /user.
          ##
          user-assets:
          ## @param prometheus.containers.server.flags.web.enable-lifecycle Enable shutdown and reload via HTTP request.
          ##
          enable-lifecycle: false
          ## @param prometheus.containers.server.flags.web.enable-admin-api Enable API endpoints for admin control actions.
          ##
          enable-admin-api: false
          ## @param prometheus.containers.server.flags.web.enable-remote-write-receiver Enable API endpoint accepting remote write requests.
          ##
          enable-remote-write-receiver: false
          remote-write-receiver:
            ## @param prometheus.containers.server.flags.web.remote-write-receiver.accepted-protobuf-messages List of the remote write protobuf messages to accept when receiving the remote writes.
            ## Supported values: prometheus.WriteRequest, io.prometheus.write.v2.Request
            ##
            accepted-protobuf-messages: prometheus.WriteRequest
          ## @param prometheus.containers.server.flags.web.enable-otlp-receiver Enable API endpoint accepting OTLP write requests.
          ##
          enable-otlp-receiver: false
          console:
            ## @param prometheus.containers.server.flags.web.console.templates Path to the console template directory, available at /consoles.
            ##
            templates: consoles
            ## @param prometheus.containers.server.flags.web.console.libraries Path to the console library directory.
            ##
            libraries: console_libraries
          ## @param prometheus.containers.server.flags.web.page-title Document title of Prometheus instance.
          ##
          page-title: "'Prometheus Time Series Collection and Processing Server'"
          cors:
            ## @param prometheus.containers.server.flags.web.cors.origin Regex for CORS origin. It is fully anchored. Example: 'https?://(domain1|domain2).com'
            ##
            origin: .*

      ## @param prometheus.containers.server.args Override default container args (useful when using custom images)
      ##
      args: []
      ## @param prometheus.containers.server.extraEnvVars Array with extra environment variables to add to %%MAIN_CONTAINER_NAME%% nodes
      ## e.g:
      ## extraEnvVars:
      ##   - name: FOO
      ##     value: "bar"
      ##
      extraEnvVars: []
      ## @param prometheus.containers.server.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for %%MAIN_CONTAINER_NAME%% nodes
      ##
      extraEnvVarsCM: ""
      ## @param prometheus.containers.server.extraEnvVarsSecret Name of existing Secret containing extra env vars for %%MAIN_CONTAINER_NAME%% nodes
      ##
      extraEnvVarsSecret: ""
      ## @param prometheus.containers.server.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the %%MAIN_CONTAINER_NAME%% container(s)
      ##
      extraVolumeMounts: []
    alertmanager:
      ## @param prometheus.containers.auth.enabled present this container in the pod
      enabled: false
      ## prometheus alertmanager image
      ## ref: https://quay.io/repository/prometheus/alertmanager?tab=tags
      ## @param prometheus.containers.alertmanager.image.registry prometheus image registry
      ## @param prometheus.containers.alertmanager.image.repository prometheus image repository
      ## @param prometheus.containers.alertmanager.image.tag prometheus image tag (immutable tags are recommended)
      ## @param prometheus.containers.alertmanager.image.digest prometheus image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)
      ## @param prometheus.containers.alertmanager.image.pullPolicy prometheus image pull policy
      ## @param prometheus.containers.alertmanager.image.pullSecrets prometheus image pull secrets
      ##
      image:
        registry: quay.io
        repository: prometheus/alertmanager
        tag: v0.28.1
        digest: ""
        ## Specify a imagePullPolicy
        ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
        ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
        ##
        pullPolicy: IfNotPresent
        ## Optionally specify an array of imagePullSecrets.
        ## Secrets must be manually created in the namespace.
        ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
        ## e.g:
        ## pullSecrets:
        ##   - myRegistryKeySecretName
        ##
        pullSecrets: []
      ## @param prometheus.containers.alertmanager.containerPorts %%MAIN_CONTAINER_NAME%% container port to expose to host
      ## e.g.
      ## containerPorts:
      ##   - name: http
      ##     containerPort: 80
      ##     hostPort: 80
      ##     hostIP: 192.168.255.10
      ##     protocol: TCP
      ##   - name: https
      ##     containerPort: 443
      ##     hostPort: 443
      ##     hostIP: 192.168.255.10
      ##     protocol: TCP
      ##
      containerPorts:
        - name: http
          containerPort: 9093
          hostPort: 9093
          protocol: TCP
      ## Configure extra options for %%MAIN_CONTAINER_NAME%% containers' liveness and readiness probes
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
      ## @param prometheus.containers.alertmanager.livenessProbe.enabled Enable livenessProbe on %%MAIN_CONTAINER_NAME%% containers
      ## @param prometheus.containers.alertmanager.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
      ## @param prometheus.containers.alertmanager.livenessProbe.periodSeconds Period seconds for livenessProbe
      ## @param prometheus.containers.alertmanager.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
      ## @param prometheus.containers.alertmanager.livenessProbe.failureThreshold Failure threshold for livenessProbe
      ## @param prometheus.containers.alertmanager.livenessProbe.successThreshold Success threshold for livenessProbe
      ##
      livenessProbe:
        enabled: true
        initialDelaySeconds: 3
        periodSeconds: 600
        timeoutSeconds: 5
        failureThreshold: 3
        successThreshold: 1
        exec:
          command:
            - sh
            - -c
            - |
              wget --quiet --tries=1 --output-document=- http://localhost:9093/-/healthy | grep -q -w Healthy
      ## @param prometheus.containers.alertmanager.readinessProbe.enabled Enable readinessProbe on %%MAIN_CONTAINER_NAME%% containers
      ## @param prometheus.containers.alertmanager.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
      ## @param prometheus.containers.alertmanager.readinessProbe.periodSeconds Period seconds for readinessProbe
      ## @param prometheus.containers.alertmanager.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
      ## @param prometheus.containers.alertmanager.readinessProbe.failureThreshold Failure threshold for readinessProbe
      ## @param prometheus.containers.alertmanager.readinessProbe.successThreshold Success threshold for readinessProbe
      ## note: podman not support readinessProbe currently
      ##
      readinessProbe:
        enabled: false
        initialDelaySeconds: foo
        periodSeconds: bar
        timeoutSeconds: foo
        failureThreshold: bar
        successThreshold: foo
      ## @param prometheus.containers.alertmanager.startupProbe.enabled Enable startupProbe on %%MAIN_CONTAINER_NAME%% containers
      ## @param prometheus.containers.alertmanager.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
      ## @param prometheus.containers.alertmanager.startupProbe.periodSeconds Period seconds for startupProbe
      ## @param prometheus.containers.alertmanager.startupProbe.timeoutSeconds Timeout seconds for startupProbe
      ## @param prometheus.containers.alertmanager.startupProbe.failureThreshold Failure threshold for startupProbe
      ## @param prometheus.containers.alertmanager.startupProbe.successThreshold Success threshold for startupProbe
      ##
      startupProbe:
        enabled: false
        initialDelaySeconds: foo
        periodSeconds: bar
        timeoutSeconds: foo
        failureThreshold: bar
        successThreshold: foo
      ## @param prometheus.containers.alertmanager.customLivenessProbe Custom livenessProbe that overrides the default one
      ##
      customLivenessProbe: {}
      ## @param prometheus.containers.alertmanager.customReadinessProbe Custom readinessProbe that overrides the default one
      ##
      customReadinessProbe: {}
      ## @param prometheus.containers.alertmanager.customStartupProbe Custom startupProbe that overrides the default one
      ##
      customStartupProbe: {}
      ## %%MAIN_CONTAINER_NAME%% resource requests and limits
      ## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
      ## @param prometheus.containers.alertmanager.resourcesPreset Set %%MAIN_CONTAINER_NAME%% container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if prometheus.containers.alertmanager.resources is set (prometheus.resources is recommended for production).
      ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
      ##
      resourcesPreset: "nano"
      ## @param prometheus.containers.alertmanager.resources Set %%MAIN_CONTAINER_NAME%% container requests and limits for different resources like CPU or memory (essential for production workloads)
      ## Example:
      ## resources:
      ##   requests:
      ##     cpu: 2
      ##     memory: 512Mi
      ##   limits:
      ##     cpu: 3
      ##     memory: 1024Mi
      ##
      resources: {}
      ## Configure Container Security Context
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
      ## @param prometheus.containers.alertmanager.containerSecurityContext.enabled Enabled %%MAIN_CONTAINER_NAME%% containers' Security Context
      ## @param prometheus.containers.alertmanager.containerSecurityContext.runAsUser Set %%MAIN_CONTAINER_NAME%% containers' Security Context runAsUser
      ## @param prometheus.containers.alertmanager.containerSecurityContext.runAsNonRoot Set %%MAIN_CONTAINER_NAME%% containers' Security Context runAsNonRoot
      ## @param prometheus.containers.alertmanager.containerSecurityContext.readOnlyRootFilesystem Set %%MAIN_CONTAINER_NAME%% containers' Security Context runAsNonRoot
      ##
      containerSecurityContext:
        enabled: false
        runAsUser: 1001
        runAsNonRoot: true
        readOnlyRootFilesystem: false

      # %%OTHER_PARAMETERS_RELATED_TO_THIS_CONTAINER/POD%%
      configFiles:
        ## @param prometheus.containers.alertmanager.configFiles.main the configuration file defines everything related to scraping jobs and their instances, as well as which rule files to load.
        ## The config file will presents in the path which specify in prometheus.containers.alertmanager.flags.config.file, default: /etc/prometheus/prometheus.yml
        ## ref: https://github.com/prometheus/alertmanager/blob/v0.28.1/examples/ha/alertmanager.yml
        ## ref: https://prometheus.io/docs/alerting/0.28/configuration/
        ##
        main:
          ## @param prometheus.containers.alertmanager.configFiles.main.route A route block defines a node in a routing tree and its children.
          ## Its optional configuration parameters are inherited from its parent node if not set.
          ## ref: https://prometheus.io/docs/alerting/0.28/configuration/#route-related-settings
          ##
          route:
            ## @param prometheus.containers.alertmanager.configFiles.main.route.group_by The labels by which incoming alerts are grouped together.
            ## For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group.
            ## To aggregate by all possible labels use the special value '...' as the sole label name, for example:
            ## group_by: ['...']
            ## This effectively disables aggregation entirely, passing through all alerts as-is.
            ## This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.
            ##
            group_by: ["alertname"]
            ## @param prometheus.containers.alertmanager.configFiles.main.route.group_wait How long to initially wait to send a notification for a group of alerts.
            ## Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)
            ## If omitted, child routes inherit the group_wait of the parent route.
            ##
            group_wait: 30s
            ## How long to wait before sending a notification about new alerts that are added to a group of alerts
            ## for which an initial notification has already been sent. (Usually ~5m or more.)
            ## If omitted, child routes inherit the group_interval of the parent route.
            ##
            group_interval: 5m
            repeat_interval: 1h
            receiver: "web.hook"
          ## @param prometheus.containers.alertmanager.configFiles.main.receivers These receiver settings allow configuring notification destinations (receivers) and HTTP client options for HTTP-based receivers.
          ## ref: https://prometheus.io/docs/alerting/0.28/configuration/#receiver
          ##
          receivers:
            - name: "web.hook"
              webhook_configs:
                - url: "http://127.0.0.1:5001/"
          ## @param prometheus.containers.alertmanager.configFiles.main.inhibit_rules An inhibition rule mutes an alert (target) matching a set of matchers when an alert (source) exists that matches another set of matchers.
          ## Both target and source alerts must have the same label values for the label names in the equal list.
          ## ref: https://prometheus.io/docs/alerting/0.28/configuration/#inhibit_rule
          ##
          inhibit_rules:
            - source_match:
                severity: "critical"
              target_match:
                severity: "warning"
              equal: ["alertname", "dev", "instance"]
        ## @param prometheus.containers.alertmanager.configFiles.web basic authentication and TLS config
        ## The config file will presents in the path which specify in prometheus.containers.alertmanager.flags.web.config.file, default: /etc/prometheus/web.yml
        ## ref: https://prometheus.io/docs/prometheus/3.4/configuration/https/
        ## e.g.
        ## web:
        ##  tls_server_config:
        ##    cert_file: /etc/prometheus/certs/prometheus.crt
        ##    key_file: /etc/prometheus/certs/prometheus.key
        ##
        web: {}

      ## @param prometheus.containers.alertmanager.existingConfigmap The name of an existing ConfigMap with your custom configuration for %%MAIN_CONTAINER_NAME%%
      ##
      existingConfigmap:
      ## @param prometheus.containers.alertmanager.tls secret setting of cert and key or whatever tls content will set in the container
      ##
      tls:
        ## @param prometheus.containers.alertmanager.tls.mountPath secret mount path (dir) setting of cert and key or whatever tls content will set in the container
        ## this config should match with config under grafana.configFile.server.cert_key and grafana.configFile.server.cert_file if any
        ##
        mountPath: /etc/alertmanager/certs
        ## @param prometheus.containers.alertmanager.tls.contents secret content of cert and key or whatever tls content will set in the container
        ## You can set the content key as whatever file name you like
        ## But the tls set in configFiles above must match with the settings here
        ## key and certificate should start with -----BEGIN CERTIFICATE----- or -----BEGIN RSA PRIVATE KEY-----
        ## e.g.
        ## contents:
        ##  ca.crt: ""
        ##  prometheus.containers.alertmanager.crt: ""
        ##  prometheus.containers.alertmanager.key: ""
        ##
        contents: {}
      ## @param prometheus.containers.alertmanager.command Override default container command (useful when using custom images)
      ##
      command: []
      ## @param prometheus.containers.alertmanager.flags flags for `prometheus` command
      ## ref: https://prometheus.io/docs/prometheus/3.4/command-line/prometheus/
      ##
      flags:
        ## @param prometheus.containers.alertmanager.flags.config.file Prometheus configuration file path.
        ##
        config:
          file: /etc/alertmanager/alertmanager.yml
        ## @param prometheus.containers.alertmanager.flags.cluster To create a highly available cluster of the Alertmanager the instances need to be configured to communicate with each other.
        ## This is configured using the --cluster.* flags.
        ## ref: https://github.com/prometheus/alertmanager/tree/v0.28.1?tab=readme-ov-file#high-availability
        ##
        cluster:
          ## @param prometheus.containers.alertmanager.flags.cluster.listen-address string: cluster listen address (default "0.0.0.0:9094"; empty string disables HA mode)
          ##
          listen-address: # 0.0.0.0:9094
          ## @param prometheus.containers.alertmanager.flags.cluster.advertise-address string: cluster advertise address
          ##
          advertise-address:
          ## @param prometheus.containers.alertmanager.flags.cluster.peer value: initial peers (repeat flag for each additional peer)
          ##
          peer:
          ## @param prometheus.containers.alertmanager.flags.cluster.peer-timeout value: peer timeout period (default "15s")
          ##
          peer-timeout: 15s
          ## @param prometheus.containers.alertmanager.flags.cluster.gossip-interval value: cluster message propagation speed (default "200ms")
          ##
          gossip-interval: 200ms
          ## @param prometheus.containers.alertmanager.flags.cluster.pushpull-interval value: lower values will increase convergence speeds at expense of bandwidth (default "1m0s")
          ##
          pushpull-interval: 1m0s
          ## @param prometheus.containers.alertmanager.flags.cluster.settle-timeout value: maximum time to wait for cluster connections to settle before evaluating notifications.
          ##
          settle-timeout:
          ## @param prometheus.containers.alertmanager.flags.cluster.tcp-timeout value: timeout value for tcp connections, reads and writes (default "10s")
          ##
          tcp-timeout: 10s
          ## @param prometheus.containers.alertmanager.flags.cluster.probe-timeout value: time to wait for ack before marking node unhealthy (default "500ms")
          ##
          probe-timeout: 500ms
          ## @param prometheus.containers.alertmanager.flags.cluster.probe-interval value: interval between random node probes (default "1s")
          ##
          probe-interval: 1s
          ## @param prometheus.containers.alertmanager.flags.cluster.reconnect-interval value: interval between attempting to reconnect to lost peers (default "10s")
          ##
          reconnect-interval: 10s
          ## @param prometheus.containers.alertmanager.flags.cluster.reconnect-timeout value: length of time to attempt to reconnect to a lost peer (default: "6h0m0s")
          ##
          reconnect-timeout: 6h0m0s
          ## @param prometheus.containers.alertmanager.flags.cluster.label value: the label is an optional string to include on each packet and stream. It uniquely identifies the cluster and prevents cross-communication issues when sending gossip messages (default:"")
          ##
          label:

        ## @param prometheus.containers.alertmanager.flags.enable-feature Comma separated feature names to enable. Valid options:
        ## FeatureReceiverNameInMetrics, FeatureClassicMode, FeatureUTF8StrictMode, FeatureAutoGOMEMLIMIT, FeatureAutoGOMAXPROCS,
        ## See https://github.com/prometheus/alertmanager/blob/v0.28.1/featurecontrol/featurecontrol.go#L31-L37 for more details.
        ##
        enable-feature:
        ## @param prometheus.containers.alertmanager.flags.log.level Only log messages with the given severity or above. One of: [debug, info, warn, error]
        ##
        log:
          level: info
        ## @param prometheus.containers.alertmanager.flags.storage.path Base path for data storage.
        ##
        storage:
          path: /alertmanager
        web:
          ## @param prometheus.containers.alertmanager.flags.web.listen-address Address to listen on for UI, API, and telemetry. Can be repeated.
          ##
          listen-address: 0.0.0.0:9093
          config:
            ## @param prometheus.containers.alertmanager.flags.web.config.file [EXPERIMENTAL] Path to configuration file that can enable TLS or authentication.
            ##
            file: # /etc/alertmanager/web.yml
          ## @param prometheus.containers.alertmanager.flags.web.external-url The URL under which Alertmanager is externally reachable (for example, if Alertmanager is served via a reverse proxy).
          ## Used for generating relative and absolute links back to Alertmanager itself.
          ## If the URL has a path portion, it will be used to prefix all HTTP endpoints served by Alertmanager.
          ## If omitted, relevant URL components will be derived automatically.
          ##
          external-url:
          ## @param prometheus.containers.alertmanager.flags.web.route-prefix Prefix for the internal routes of web endpoints. Defaults to path of --web.external-url.
          ##
          route-prefix:
      ## @param prometheus.containers.alertmanager.args Override default container args (useful when using custom images)
      ##
      args: []
      ## @param prometheus.containers.alertmanager.extraEnvVars Array with extra environment variables to add to %%MAIN_CONTAINER_NAME%% nodes
      ## e.g:
      ## extraEnvVars:
      ##   - name: FOO
      ##     value: "bar"
      ##
      extraEnvVars: []
      ## @param prometheus.containers.alertmanager.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for %%MAIN_CONTAINER_NAME%% nodes
      ##
      extraEnvVarsCM: ""
      ## @param prometheus.containers.alertmanager.extraEnvVarsSecret Name of existing Secret containing extra env vars for %%MAIN_CONTAINER_NAME%% nodes
      ##
      extraEnvVarsSecret: ""
      ## @param prometheus.containers.alertmanager.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the %%MAIN_CONTAINER_NAME%% container(s)
      ##
      extraVolumeMounts: []
    blackboxExporter:
      ## @param prometheus.containers.blackboxExporter.enabled present this container in the pod
      enabled: true
      ## prometheus blackboxExporter image
      ## ref: https://quay.io/repository/prometheus/blackbox-exporter?tab=tags
      ## @param prometheus.containers.blackboxExporter.image.registry prometheus image registry
      ## @param prometheus.containers.blackboxExporter.image.repository prometheus image repository
      ## @param prometheus.containers.blackboxExporter.image.tag prometheus image tag (immutable tags are recommended)
      ## @param prometheus.containers.blackboxExporter.image.digest prometheus image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)
      ## @param prometheus.containers.blackboxExporter.image.pullPolicy prometheus image pull policy
      ## @param prometheus.containers.blackboxExporter.image.pullSecrets prometheus image pull secrets
      ##
      image:
        registry: quay.io
        repository: prometheus/blackbox-exporter
        tag: v0.26.0
        digest: ""
        ## Specify a imagePullPolicy
        ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
        ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
        ##
        pullPolicy: IfNotPresent
        ## Optionally specify an array of imagePullSecrets.
        ## Secrets must be manually created in the namespace.
        ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
        ## e.g:
        ## pullSecrets:
        ##   - myRegistryKeySecretName
        ##
        pullSecrets: []
      ## @param prometheus.containers.blackboxExporter.containerPorts %%MAIN_CONTAINER_NAME%% container port to expose to host
      ## e.g.
      ## containerPorts:
      ##   - name: http
      ##     containerPort: 80
      ##     hostPort: 80
      ##     hostIP: 192.168.255.10
      ##     protocol: TCP
      ##   - name: https
      ##     containerPort: 443
      ##     hostPort: 443
      ##     hostIP: 192.168.255.10
      ##     protocol: TCP
      ##
      containerPorts:
        - name: http
          containerPort: 9115
          hostPort: 9115
          protocol: TCP
      ## Configure extra options for %%MAIN_CONTAINER_NAME%% containers' liveness and readiness probes
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
      ## @param prometheus.containers.blackboxExporter.livenessProbe.enabled Enable livenessProbe on %%MAIN_CONTAINER_NAME%% containers
      ## @param prometheus.containers.blackboxExporter.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
      ## @param prometheus.containers.blackboxExporter.livenessProbe.periodSeconds Period seconds for livenessProbe
      ## @param prometheus.containers.blackboxExporter.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
      ## @param prometheus.containers.blackboxExporter.livenessProbe.failureThreshold Failure threshold for livenessProbe
      ## @param prometheus.containers.blackboxExporter.livenessProbe.successThreshold Success threshold for livenessProbe
      ##
      livenessProbe:
        enabled: true
        initialDelaySeconds: 3
        periodSeconds: 600
        timeoutSeconds: 5
        failureThreshold: 3
        successThreshold: 1
        exec:
          command:
            - sh
            - -c
            - |
              wget --quiet --tries=1 --output-document=- http://localhost:9115/-/healthy | grep -q -w Healthy
      ## @param prometheus.containers.blackboxExporter.readinessProbe.enabled Enable readinessProbe on %%MAIN_CONTAINER_NAME%% containers
      ## @param prometheus.containers.blackboxExporter.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
      ## @param prometheus.containers.blackboxExporter.readinessProbe.periodSeconds Period seconds for readinessProbe
      ## @param prometheus.containers.blackboxExporter.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
      ## @param prometheus.containers.blackboxExporter.readinessProbe.failureThreshold Failure threshold for readinessProbe
      ## @param prometheus.containers.blackboxExporter.readinessProbe.successThreshold Success threshold for readinessProbe
      ## note: podman not support readinessProbe currently
      ##
      readinessProbe:
        enabled: false
        initialDelaySeconds: foo
        periodSeconds: bar
        timeoutSeconds: foo
        failureThreshold: bar
        successThreshold: foo
      ## @param prometheus.containers.blackboxExporter.startupProbe.enabled Enable startupProbe on %%MAIN_CONTAINER_NAME%% containers
      ## @param prometheus.containers.blackboxExporter.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
      ## @param prometheus.containers.blackboxExporter.startupProbe.periodSeconds Period seconds for startupProbe
      ## @param prometheus.containers.blackboxExporter.startupProbe.timeoutSeconds Timeout seconds for startupProbe
      ## @param prometheus.containers.blackboxExporter.startupProbe.failureThreshold Failure threshold for startupProbe
      ## @param prometheus.containers.blackboxExporter.startupProbe.successThreshold Success threshold for startupProbe
      ##
      startupProbe:
        enabled: false
        initialDelaySeconds: foo
        periodSeconds: bar
        timeoutSeconds: foo
        failureThreshold: bar
        successThreshold: foo
      ## @param prometheus.containers.blackboxExporter.customLivenessProbe Custom livenessProbe that overrides the default one
      ##
      customLivenessProbe: {}
      ## @param prometheus.containers.blackboxExporter.customReadinessProbe Custom readinessProbe that overrides the default one
      ##
      customReadinessProbe: {}
      ## @param prometheus.containers.blackboxExporter.customStartupProbe Custom startupProbe that overrides the default one
      ##
      customStartupProbe: {}
      ## %%MAIN_CONTAINER_NAME%% resource requests and limits
      ## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
      ## @param prometheus.containers.blackboxExporter.resourcesPreset Set %%MAIN_CONTAINER_NAME%% container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if prometheus.containers.blackboxExporter.resources is set (prometheus.resources is recommended for production).
      ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
      ##
      resourcesPreset: "nano"
      ## @param prometheus.containers.blackboxExporter.resources Set %%MAIN_CONTAINER_NAME%% container requests and limits for different resources like CPU or memory (essential for production workloads)
      ## Example:
      ## resources:
      ##   requests:
      ##     cpu: 2
      ##     memory: 512Mi
      ##   limits:
      ##     cpu: 3
      ##     memory: 1024Mi
      ##
      resources: {}
      ## Configure Container Security Context
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
      ## @param prometheus.containers.blackboxExporter.containerSecurityContext.enabled Enabled %%MAIN_CONTAINER_NAME%% containers' Security Context
      ## @param prometheus.containers.blackboxExporter.containerSecurityContext.runAsUser Set %%MAIN_CONTAINER_NAME%% containers' Security Context runAsUser
      ## @param prometheus.containers.blackboxExporter.containerSecurityContext.runAsNonRoot Set %%MAIN_CONTAINER_NAME%% containers' Security Context runAsNonRoot
      ## @param prometheus.containers.blackboxExporter.containerSecurityContext.readOnlyRootFilesystem Set %%MAIN_CONTAINER_NAME%% containers' Security Context runAsNonRoot
      ##
      containerSecurityContext:
        enabled: false
        runAsUser: 1001
        runAsNonRoot: true
        readOnlyRootFilesystem: false

      # %%OTHER_PARAMETERS_RELATED_TO_THIS_CONTAINER/POD%%
      configFiles:
        ## @param prometheus.containers.blackboxExporter.configFiles.main the configuration file defines everything related to scraping jobs and their instances, as well as which rule files to load.
        ## The config file will presents in the path which specify in prometheus.containers.blackboxExporter.flags.config.file, default: /etc/prometheus/prometheus.yml
        ## ref: https://github.com/prometheus/blackbox_exporter/blob/v0.26.0/blackbox.yml
        ##
        main:
          ## @param prometheus.containers.blackboxExporter.configFiles.main.global The global configuration specifies parameters that are valid in all other configuration contexts.
          ## ref: https://github.com/prometheus/blackbox_exporter/blob/v0.26.0/CONFIGURATION.md
          ##
          modules:
            http_2xx:
              prober: http
              http:
                preferred_ip_protocol: "ip4"
            http_post_2xx:
              prober: http
              http:
                method: POST
            tcp_connect:
              prober: tcp
            pop3s_banner:
              prober: tcp
              tcp:
                query_response:
                  - expect: "^+OK"
                tls: true
                tls_config:
                  insecure_skip_verify: false
            grpc:
              prober: grpc
              grpc:
                tls: true
                preferred_ip_protocol: "ip4"
            grpc_plain:
              prober: grpc
              grpc:
                tls: false
                service: "service1"
            ssh_banner:
              prober: tcp
              tcp:
                query_response:
                  - expect: "^SSH-2.0-"
                  - send: "SSH-2.0-blackbox-ssh-check"
            ssh_banner_extract:
              prober: tcp
              timeout: 5s
              tcp:
                query_response:
                  - expect: "^SSH-2.0-([^ -]+)(?: (.*))?$"
                    labels:
                      - name: ssh_version
                        value: "${1}"
                      - name: ssh_comments
                        value: "${2}"
            irc_banner:
              prober: tcp
              tcp:
                query_response:
                  - send: "NICK prober"
                  - send: "USER prober prober prober :prober"
                  - expect: "PING :([^ ]+)"
                    send: "PONG ${1}"
                  - expect: "^:[^ ]+ 001"
            icmp:
              prober: icmp
            icmp_ttl5:
              prober: icmp
              timeout: 5s
              icmp:
                ttl: 5
        ## @param prometheus.containers.blackboxExporter.configFiles.web basic authentication and TLS config
        ## The config file will presents in the path which specify in prometheus.containers.blackboxExporter.flags.web.config.file, default: /etc/prometheus/web.yml
        ## ref: https://prometheus.io/docs/prometheus/3.4/configuration/https/
        ## e.g.
        ## web:
        ##  tls_server_config:
        ##    cert_file: /etc/prometheus/certs/prometheus.crt
        ##    key_file: /etc/prometheus/certs/prometheus.key
        ##
        web: {}

      ## @param prometheus.containers.blackboxExporter.existingConfigmap The name of an existing ConfigMap with your custom configuration for %%MAIN_CONTAINER_NAME%%
      ##
      existingConfigmap:
      ## @param prometheus.containers.blackboxExporter.tls secret setting of cert and key or whatever tls content will set in the container
      ##
      tls:
        ## @param prometheus.containers.blackboxExporter.tls.mountPath secret mount path (dir) setting of cert and key or whatever tls content will set in the container
        ## this config should match with config under grafana.configFile.server.cert_key and grafana.configFile.server.cert_file if any
        ##
        mountPath: /etc/blackbox_exporter/certs
        ## @param prometheus.containers.blackboxExporter.tls.contents secret content of cert and key or whatever tls content will set in the container
        ## You can set the content key as whatever file name you like
        ## But the tls set in configFiles above must match with the settings here
        ## key and certificate should start with -----BEGIN CERTIFICATE----- or -----BEGIN RSA PRIVATE KEY-----
        ## e.g.
        ## contents:
        ##  ca.crt: ""
        ##  blackboxExporter.crt: ""
        ##  blackboxExporter.key: ""
        ##
        contents: {}
      ## @param prometheus.containers.blackboxExporter.command Override default container command (useful when using custom images)
      ##
      command: []
      ## @param prometheus.containers.server.flags flags for `prometheus` command
      ## ref: https://github.com/prometheus/blackbox_exporter/blob/v0.26.0/main.go
      ##
      flags:
        config:
          ## @param prometheus.containers.server.flags.config.file Prometheus configuration file path.
          ##
          file: /etc/blackbox_exporter/config.yml
        ## @param prometheus.containers.server.flags.history.limit The maximum amount of items to keep in the history.
        history:
          limit: 100
        log:
          ## @param prometheus.containers.server.flags.log.prober Log level from probe requests. One of: [debug, info, warn, error]
          ##
          prober: info
        ## @param prometheus.containers.server.flags.config.file Offset to subtract from timeout in seconds.
        timeout-offset:
        web:
          config:
            ## @param prometheus.containers.server.flags.web.config.file [EXPERIMENTAL] Path to configuration file that can enable TLS or authentication.
            ##
            file: # /etc/blackbox_exporter/web.yml
          ## @param prometheus.containers.server.flags.web.external-url The URL under which Blackbox Exporter is externally reachable (for example, if Blackbox Exporter is served via a reverse proxy).
          external-url:
          ## @param prometheus.containers.server.flags.web.listen-address Address to listen on for UI, API, and telemetry. Can be repeated.
          ##
          listen-address: 0.0.0.0:9115
          ## @param prometheus.containers.server.flags.web.route-prefix Prefix for the internal routes of web endpoints. Defaults to path of --web.external-url.
          ##
          route-prefix:

      ## @param prometheus.containers.server.args Override default container args (useful when using custom images)
      ##
      args: []
      ## @param prometheus.containers.server.extraEnvVars Array with extra environment variables to add to %%MAIN_CONTAINER_NAME%% nodes
      ## e.g:
      ## extraEnvVars:
      ##   - name: FOO
      ##     value: "bar"
      ##
      extraEnvVars: []
      ## @param prometheus.containers.server.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for %%MAIN_CONTAINER_NAME%% nodes
      ##
      extraEnvVarsCM: ""
      ## @param prometheus.containers.server.extraEnvVarsSecret Name of existing Secret containing extra env vars for %%MAIN_CONTAINER_NAME%% nodes
      ##
      extraEnvVarsSecret: ""
      ## @param prometheus.containers.server.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the %%MAIN_CONTAINER_NAME%% container(s)
      ##
      extraVolumeMounts: []
## @section Persistence Parameters
##

## Enable persistence using Persistent Volume Claims
## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  ## @param persistence.enabled Enable persistence using Persistent Volume Claims
  ##
  enabled: true
  ## @param persistence.mountPath Path to mount the volume at.
  ##
  mountPath:
    server: "{{ .Values.prometheus.containers.server.flags.storage.tsdb.path }}"
    alertmanager: "{{ .Values.prometheus.containers.alertmanager.flags.storage.path }}"
    blackboxExporter:
  ## @param persistence.subPath The subdirectory of the volume to mount to, useful in dev environments and one PV for multiple services
  ##
  subPath:
    server:
    alertmanager:
    blackboxExporter:
  ## @param persistence.storageClass Storage class of backing PVC
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: ""
  ## @param persistence.annotations Persistent Volume Claim annotations
  ##
  annotations: {}
  ## @param persistence.accessModes Persistent Volume Access Modes
  ##
  accessModes:
    - ReadWriteOnce
  ## @param persistence.size Size of data volume
  ##
  size: 8Gi
  ## @param persistence.existingClaim The name of an existing PVC to use for persistence
  ##
  existingClaim: ""
## @section Init Container Parameters
##

## 'volumePermissions' init container parameters
## Changes the owner and group of the persistent volume mount point to runAsUser:fsGroup values
##   based on the *podSecurityContext/*containerSecurityContext parameters
##
volumePermissions:
  ## @param volumePermissions.enabled Enable init container that changes the owner/group of the PV mount point to `runAsUser:fsGroup`
  ##
  enabled: false
  ## OS Shell + Utility image
  ## ref: https://hub.docker.com/r/bitnami/os-shell/tags/
  ## @param volumePermissions.image.registry OS Shell + Utility image registry
  ## @param volumePermissions.image.repository OS Shell + Utility image repository
  ## @param volumePermissions.image.tag OS Shell + Utility image tag (immutable tags are recommended)
  ## @param volumePermissions.image.pullPolicy OS Shell + Utility image pull policy
  ## @param volumePermissions.image.pullSecrets OS Shell + Utility image pull secrets
  ##
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 11-debian-11-r%%IMAGE_REVISION%%
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## Init container's resource requests and limits
  ## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param volumePermissions.resourcesPreset Set init container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if volumePermissions.resources is set (volumePermissions.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param volumePermissions.resources Set init container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Init container Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param volumePermissions.containerSecurityContext.runAsUser Set init container's Security Context runAsUser
  ## NOTE: when runAsUser is set to special value "auto", init container will try to chown the
  ##   data folder to auto-determined user&group, using commands: `id -u`:`id -G | cut -d" " -f2`
  ##   "auto" is especially useful for OpenShift which has scc with dynamic user ids (and 0 is not allowed)
  ##
  containerSecurityContext:
    runAsUser: 0

## @section Other Parameters
##

## %%SUBCHART_CONTAINER/POD_DESCRIPTION%%
##
# %%SUBCHART_NAME%%:
SUBCHART_NAME:
  enabled: false
  # %%OTHER_PARAMETERS_RELATED_TO_THIS_SUBCHART%%
