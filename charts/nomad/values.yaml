## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
##

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
## @param global.storageClass Global StorageClass for Persistent Volume(s)
##
global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  storageClass: ""

## @section Common parameters
##
## @param nameOverride String to partially override common.names.name
##
nameOverride: ""
## @param fullnameOverride String to fully override common.names.fullname
##
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}

## @param nomad.deployKind specify the deploy kindï¼š Pod, or Deployment
deployKind: Pod
## @section nomad Parameters
##

## %%MAIN_CONTAINER/POD_DESCRIPTION%%
##
nomad:
  ## hashicorp nomad image
  ## ref: https://hub.docker.com/r/hashicorp/nomad/tags/
  ## @param nomad.image.registry nomad image registry
  ## @param nomad.image.repository nomad image repository
  ## @param nomad.image.tag nomad image tag (immutable tags are recommended)
  ## @param nomad.image.digest nomad image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)
  ## @param nomad.image.pullPolicy nomad image pull policy
  ## @param nomad.image.pullSecrets nomad image pull secrets
  ##
  image:
    registry: docker.io
    repository: hashicorp/nomad
    tag: "1.9"
    digest: ""
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []

  ## @param nomad.podRestartPolicy specify the pod restart policy if deployKind set to Pod
  ## available options: Always, OnFailure, Never
  podRestartPolicy: Never
  ## @param nomad.replicaCount Number of nomad replicas to deploy
  ##
  replicaCount: 1
  ## @param nomad.containerPorts nomad container port to expose to host
  ## ref: https://developer.hashicorp.com/nomad/docs/configuration
  containerPorts:
    - name: http
      containerPort: 4646
      hostPort: 4646
      protocol: TCP
    - name: rpc
      containerPort: 4647
      hostPort: 4647
      protocol: TCP
    - name: serf-tcp
      containerPort: 4648
      hostPort: 4648
      protocol: TCP
    - name: serf-udp
      containerPort: 4648
      hostPort: 4648
      protocol: UDP
  ## Configure extra options for nomad containers' liveness and readiness probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param nomad.livenessProbe.enabled Enable livenessProbe on nomad containers
  ## @param nomad.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param nomad.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param nomad.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param nomad.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param nomad.livenessProbe.successThreshold Success threshold for livenessProbe
  ## ref: https://developer.hashicorp.com/nomad/api-docs/status#read-leader
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 180
    periodSeconds: 300
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    httpGet:
      path: /v1/status/leader
      port: 4646
  ## @param nomad.readinessProbe.enabled Enable readinessProbe on nomad containers
  ## @param nomad.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param nomad.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param nomad.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param nomad.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param nomad.readinessProbe.successThreshold Success threshold for readinessProbe
  ## note: podman not support readinessProbe currently
  ##
  readinessProbe:
    enabled: false
    initialDelaySeconds: 180
    periodSeconds: 300
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    httpGet:
      path: /v1/status/leader
      port: 8500
  ## @param nomad.startupProbe.enabled Enable startupProbe on nomad containers
  ## @param nomad.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
  ## @param nomad.startupProbe.periodSeconds Period seconds for startupProbe
  ## @param nomad.startupProbe.timeoutSeconds Timeout seconds for startupProbe
  ## @param nomad.startupProbe.failureThreshold Failure threshold for startupProbe
  ## @param nomad.startupProbe.successThreshold Success threshold for startupProbe
  ##
  startupProbe:
    enabled: false
    initialDelaySeconds: foo
    periodSeconds: bar
    timeoutSeconds: foo
    failureThreshold: bar
    successThreshold: foo
  ## @param nomad.customLivenessProbe Custom livenessProbe that overrides the default one
  ##
  customLivenessProbe: {}
  ## @param nomad.customReadinessProbe Custom readinessProbe that overrides the default one
  ##
  customReadinessProbe: {}
  ## @param nomad.customStartupProbe Custom startupProbe that overrides the default one
  ##
  customStartupProbe: {}
  ## nomad resource requests and limits
  ## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param nomad.resourcesPreset Set nomad container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if nomad.resources is set (nomad.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param nomad.resources Set nomad container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Configure Pods Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param nomad.podSecurityContext.enabled Enabled nomad pods' Security Context
  ## @param nomad.podSecurityContext.fsGroup Set nomad pod's Security Context fsGroup
  ##
  podSecurityContext:
    enabled: false
  ## Configure Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## ref: https://github.com/hashicorp/nomad/blob/main/Dockerfile
  ## ref: https://github.com/hashicorp/nomad-k8s/blob/main/charts/nomad/values.yaml#L1126
  ## @param nomad.containerSecurityContext.enabled Enabled nomad containers' Security Context
  ## @param nomad.containerSecurityContext.runAsUser Set nomad containers' Security Context runAsUser
  ## @param nomad.containerSecurityContext.runAsNonRoot Set nomad containers' Security Context runAsNonRoot
  ## @param nomad.containerSecurityContext.readOnlyRootFilesystem Set nomad containers' Security Context runAsNonRoot
  ##
  containerSecurityContext:
    enabled: true
    runAsGroup: 1000
    runAsUser: 100
    runAsNonRoot: true
    readOnlyRootFilesystem: true

  # %%OTHER_PARAMETERS_RELATED_TO_THIS_CONTAINER/POD%%

  ## @param nomad.configFiles config files to start nomad
  ## The sub config block will convert to json and injected as ConfigMap and mount into /nomad/config/***.json
  ## You can add whatever sub items under this block
  ## ref: https://developer.hashicorp.com/nomad/docs/configuration
  ##
  configFiles:
    ## @param nomad.configFiles.general General config for server and client agent
    ## The config under this node will convert to json file and place in /nomad/config/general.json
    ## https://developer.hashicorp.com/nomad/docs/configuration#general-parameters
    ##
    general:
      ## @param nomad.configFiles.general.auto_reload_config This option directs nomad to automatically reload the reloadable configuration options when configuration files change.
      ## nomad also watches the certificate and key files specified with the cert_file and key_file parameters and reloads the configuration if the files are updated.
      ## ref: https://developer.hashicorp.com/nomad/docs/configuration#configuration-reload
      ##
      auto_reload_config: true
      ## @param nomad.configFiles.general.bind_addr The address that should be bound to for internal cluster communications.
      ## This is an IP address that should be reachable by all other nodes in the cluster.
      ## By default, this is "0.0.0.0", meaning nomad will bind to all addresses on the local machine and will advertise the private IPv4 address to the rest of the cluster.
      ## If there are multiple private IPv4 addresses available, nomad will exit with an error at startup.
      ## ref:https://developer.hashicorp.com/nomad/docs/configuration#bind_addr
      ##
      bind_addr: "0.0.0.0"
      ## @param nomad.configFiles.general.addresses Specifies the bind address for individual network services.
      ## Any values configured in this block take precedence over the default bind_addr.
      ## These values should be specified in IP format without a port (ex. "0.0.0.0"). To set the port, refer to the ports field.
      ## ref: https://developer.hashicorp.com/nomad/docs/configuration#addresses
      ##
      # addresses:
      ## @param nomad.configFiles.general.advertise Specifies the advertise address for individual network services.
      ## This can be used to advertise a different address to the peers of a server or a client node to support more complex network configurations such as NAT.
      ## This configuration is optional, and defaults to the bind address of the specific network service if it is not provided.
      ## Any values configured in this block take precedence over the default bind_addr.
      ##
      advertise:
      ## @param nomad.configFiles.general.datacenter This flag controls the datacenter in which the agent is running.
      ## If not provided, it defaults to "dc1".
      ## ref: https://developer.hashicorp.com/nomad/docs/agent/config/cli-flags#_datacenter
      ##
      datacenter: dc1
      ## @param nomad.configFiles.general.data_dir Specifies a local directory used to store agent state.
      ## Client nodes use this directory by default to store temporary allocation data as well as cluster information.
      ## Server nodes use this directory to store cluster state, including the replicated log and snapshot data.
      ## This must be specified as an absolute path. Nomad will create the directory on the host, if it does not exist when the agent process starts.
      ## ref: https://developer.hashicorp.com/nomad/docs/configuration#data_dir
      ##
      data_dir: /nomad/data
      ## @param nomad.configFiles.general.retry_join Address of another agent to join upon starting up
      ## The retry_join parameter allows you to configure all nomad agents to automatically form a datacenter using a common nomad server accessed via DNS address,
      ## IP address or using Cloud Auto-join.
      ## Suggest to set to the host fqdn resolve by dns, e.g. SvcDisc.Infra.Sololab
      ##
      retry_join: null
      ## @param nomad.configFiles.general.ports This is a nested object that allows setting the bind ports for the following keys
      ##
      ports: {}
      ## @param nomad.configFiles.general.server This flag is used to control if an agent is in server or client mode. When provided, an agent will act as a nomad server.
      ## ref: https://developer.hashicorp.com/nomad/docs/agent/config/config-files#server-1
      ## ref: https://developer.hashicorp.com/nomad/docs/agent/config/cli-flags#_server
      ##
      server: true
    ## @param nomad.configFiles.acl ACL Parameters
    ## The config under this node will convert to json file and place in /nomad/config/acl.json
    ## ref: https://developer.hashicorp.com/nomad/docs/agent/config/config-files#acl-parameters
    ##
    acl:
      ## @param nomad.configFiles.acl.acl
      ## This object allows a number of sub-keys to be set which controls the ACL system.
      ## Configuring the ACL system within the ACL stanza was added in nomad 1.4.0
      ##
      acl:
        enabled: false
    ## @param nomad.configFiles.bootstrap Bootstrap Parameters
    ## The config under this node will convert to json file and place in /nomad/config/bootstrap.json
    ## ref: https://developer.hashicorp.com/nomad/docs/agent/config/config-files#bootstrap-parameters
    ##
    bootstrap:
      ## @param nomad.configFiles.bootstrap.bootstrap_expect This flag provides the number of expected servers in the datacenter.
      ## This flag requires -server mode.
      ## ref: https://developer.hashicorp.com/nomad/docs/agent/config/cli-flags#_bootstrap_expect
      ##
      bootstrap_expect: 1
    ## @param nomad.configFiles.encryption Encryption Parameters
    ## The config under this node will convert to json file and place in /nomad/config/encryption.json
    ## ref: https://developer.hashicorp.com/nomad/docs/agent/config/config-files#encryption-parameters
    ##
    encryption:
      ## @param nomad.configFiles.encryption.encrypt
      ## Specifies the secret key to use for encryption of nomad network traffic. This key must be 32-bytes that are Base64-encoded.
      ## The easiest way to create an encryption key is to use nomad keygen. All nodes within a cluster must share the same encryption key to communicate.
      ## The provided key is automatically persisted to the data directory and loaded automatically whenever the agent is restarted.
      ## This means that to encrypt nomad's gossip protocol, this option only needs to be provided once on each agent's initial startup sequence.
      ## If it is provided after nomad has been initialized with an encryption key, then the provided key is ignored and a warning will be displayed
      ## ref: https://developer.hashicorp.com/nomad/docs/agent/config/cli-flags#_encrypt
      ##
      encrypt: ""
    ## @param nomad.configFiles.ui UI Parameters
    ## The config under this node will convert to json file and place in /nomad/config/ui.json
    ## ref: https://developer.hashicorp.com/nomad/docs/agent/config/config-files#ui-parameters
    ##
    ui:
      ## @param nomad.configFiles.ui.ui_config This object allows a number of sub-keys to be set which controls the display or features available in the UI.
      ## Configuring the UI with this stanza was added in nomad 1.9.0.
      ## ref: https://developer.hashicorp.com/nomad/docs/agent/config/config-files#ui-parameters
      ##
      ui_config:
        ## @param nomad.configFiles.ui.ui_config.enabled This enables the service of the web UI from this agent
        ## ref: https://developer.hashicorp.com/nomad/docs/agent/config/config-files#ui_config_enabled
        ##
        enabled: true
        ## @param nomad.configFiles.ui.ui_config.content_path This specifies the HTTP path that the web UI should be served from.
        ## ref: https://developer.hashicorp.com/nomad/docs/agent/config/config-files#ui_config_content_path
        ##
        content_path: /ui/
    ## @param nomad.configFiles.tls TLS Configuration Reference
    ## The config under this node will convert to json file and place in /nomad/config/tls.json
    ## This section documents all of the configuration settings that apply to Agent TLS.
    ## Agent TLS is used by the HTTP API, internal RPC, and gRPC/xDS interfaces
    ## ref: https://developer.hashicorp.com/nomad/docs/agent/config/config-files#tls-configuration-reference
    ##
    tls:
      ## @param nomad.configFiles.tls.tls
      ## this block should better set together with below nomad.tls block
      ## e.g.
      ## tls:
      ##   defaults:
      ##    ca_file: /nomad/config/certs/nomad-agent-ca.pem
      ##    cert_file: /nomad/config/certs/dc1-server-nomad-1.pem
      ##    key_file: /nomad/config/certs/dc1-server-nomad-1-key.pem
      ##
      tls: {}

  ## @param nomad.tls secret setting of cert and key or whatever tls content will set in the container
  ## @param nomad.tls.mountPath secret mount path setting of cert and key or whatever tls content will set in the container
  ##
  tls:
    mountPath: /nomad/config/certs
    ## @param nomad.tls.contents secret content of cert and key or whatever tls content will set in the container
    ## You can set the content key as whatever file name you like
    ## But the tls set in configFiles above must match with the settings here
    ## key and certificate should start with -----BEGIN CERTIFICATE----- or -----BEGIN RSA PRIVATE KEY-----
    ## e.g.
    ## contents:
    ##  nomad-agent-ca.pem: ""
    ##  dc1-server-nomad-1.pem: ""
    ##  dc1-server-nomad-1-key.pem: ""
    ##
    contents: {}

  ## @param nomad.existingConfigmap The name of an existing ConfigMap with your custom configuration for nomad
  ##
  existingConfigmap:
  ## @param nomad.command Override default container command (useful when using custom images)
  ##
  command: []
  ## @param nomad.args Override default container args (useful when using custom images)
  ##
  args: []
  ## @param nomad.hostAliases nomad pods host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param nomad.podLabels Extra labels for nomad pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param nomad.podAnnotations Annotations for nomad pods
  ## to keep container user as same permission as host user, set keep-id point to the container user and group id
  ## the userns annotation only work podman v4.9+
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ## ref: https://github.com/containers/podman/discussions/22378
  ## ref: https://github.com/hashicorp/nomad/blob/v1.20.2/Dockerfile#L271-L273
  ## e.g.
  ## podAnnotations:
  ##   io.podman.annotations.userns: keep-id:uid=100,gid=1000
  ##
  podAnnotations: {}
  ## Autoscaling configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  ## @param nomad.autoscaling.enabled Enable autoscaling for nomad
  ## @param nomad.autoscaling.minReplicas Minimum number of nomad replicas
  ## @param nomad.autoscaling.maxReplicas Maximum number of nomad replicas
  ## @param nomad.autoscaling.targetCPU Target CPU utilization percentage
  ## @param nomad.autoscaling.targetMemory Target Memory utilization percentage
  ##
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""

  ## @param nomad.extraEnvVars Array with extra environment variables to add to nomad nodes
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars:
    # https://github.com/hashicorp/nomad/blob/9e23fa78403a50a624d22a5774e975ef2b019a37/.release/docker/docker-entrypoint.sh#L88
    - name: nomad_DISABLE_PERM_MGMT
      value: "true"
  ## @param nomad.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for nomad nodes
  ##
  extraEnvVarsCM: ""
  ## @param nomad.extraEnvVarsSecret Name of existing Secret containing extra env vars for nomad nodes
  ##
  extraEnvVarsSecret: ""
  ## @param nomad.extraVolumes Optionally specify extra list of additional volumes for the nomad pod(s)
  ##
  extraVolumes: []
  ## @param nomad.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the nomad container(s)
  ##
  extraVolumeMounts: []
  ## @param nomad.sidecars Add additional sidecar containers to the nomad pod(s)
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: []
  ## @param nomad.initContainers Add additional init containers to the nomad pod(s)
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']
  ##
  initContainers: []

## @section Persistence Parameters
##

## Enable persistence using Persistent Volume Claims
## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  ## @param persistence.enabled Enable persistence using Persistent Volume Claims
  ##
  enabled: true
  ## @param persistence.mountPath Path to mount the volume at.
  ##
  mountPath: /nomad/data
  ## @param persistence.subPath The subdirectory of the volume to mount to, useful in dev environments and one PV for multiple services
  ##
  subPath: ""
  ## @param persistence.storageClass Storage class of backing PVC
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: ""
  ## @param persistence.annotations Persistent Volume Claim annotations
  ##
  annotations: {}
  ## @param persistence.accessModes Persistent Volume Access Modes
  ##
  accessModes:
    - ReadWriteOnce
  ## @param persistence.size Size of data volume
  ##
  size: 8Gi
  ## @param persistence.existingClaim The name of an existing PVC to use for persistence
  ##
  existingClaim: ""
  ## @param persistence.dataSource Custom PVC data source
  ##
  dataSource: {}
## @section Init Container Parameters
##

## 'volumePermissions' init container parameters
## Changes the owner and group of the persistent volume mount point to runAsUser:fsGroup values
##   based on the *podSecurityContext/*containerSecurityContext parameters
##
volumePermissions:
  ## @param volumePermissions.enabled Enable init container that changes the owner/group of the PV mount point to `runAsUser:fsGroup`
  ##
  enabled: false
  ## OS Shell + Utility image
  ## ref: https://hub.docker.com/r/bitnami/os-shell/tags/
  ## @param volumePermissions.image.registry OS Shell + Utility image registry
  ## @param volumePermissions.image.repository OS Shell + Utility image repository
  ## @param volumePermissions.image.tag OS Shell + Utility image tag (immutable tags are recommended)
  ## @param volumePermissions.image.pullPolicy OS Shell + Utility image pull policy
  ## @param volumePermissions.image.pullSecrets OS Shell + Utility image pull secrets
  ##
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 11-debian-11-r%%IMAGE_REVISION%%
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## Init container's resource requests and limits
  ## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param volumePermissions.resourcesPreset Set init container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if volumePermissions.resources is set (volumePermissions.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param volumePermissions.resources Set init container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Init container Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param volumePermissions.containerSecurityContext.runAsUser Set init container's Security Context runAsUser
  ## NOTE: when runAsUser is set to special value "auto", init container will try to chown the
  ##   data folder to auto-determined user&group, using commands: `id -u`:`id -G | cut -d" " -f2`
  ##   "auto" is especially useful for OpenShift which has scc with dynamic user ids (and 0 is not allowed)
  ##
  containerSecurityContext:
    runAsUser: 0
## @section Other Parameters
##

