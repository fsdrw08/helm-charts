## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
##

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
## @param global.storageClass Global StorageClass for Persistent Volume(s)
##
global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  storageClass: ""

## @section Common parameters
##
## @param nameOverride String to partially override common.names.name
##
nameOverride: ""
## @param fullnameOverride String to fully override common.names.fullname
##
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}

## @param nomad.deployKind specify the deploy kindï¼š Pod, or Deployment
deployKind: Pod
## @section nomad Parameters
##

## %%MAIN_CONTAINER/POD_DESCRIPTION%%
##
nomad:
  ## hashicorp nomad image
  ## ref: https://hub.docker.com/r/hashicorp/nomad/tags/
  ## @param nomad.image.registry nomad image registry
  ## @param nomad.image.repository nomad image repository
  ## @param nomad.image.tag nomad image tag (immutable tags are recommended)
  ## @param nomad.image.digest nomad image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)
  ## @param nomad.image.pullPolicy nomad image pull policy
  ## @param nomad.image.pullSecrets nomad image pull secrets
  ##
  image:
    registry: docker.io
    repository: hashicorp/nomad
    tag: "1.9"
    digest: ""
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []

  ## @param nomad.podRestartPolicy specify the pod restart policy if deployKind set to Pod
  ## available options: Always, OnFailure, Never
  podRestartPolicy: Never
  ## @param nomad.replicaCount Number of nomad replicas to deploy
  ##
  replicaCount: 1
  ## @param nomad.containerPorts nomad container port to expose to host
  ## ref: https://developer.hashicorp.com/nomad/docs/configuration
  containerPorts:
    - name: http
      containerPort: 4646
      hostPort: 4646
      protocol: TCP
    - name: rpc
      containerPort: 4647
      hostPort: 4647
      protocol: TCP
    - name: serf-tcp
      containerPort: 4648
      hostPort: 4648
      protocol: TCP
    - name: serf-udp
      containerPort: 4648
      hostPort: 4648
      protocol: UDP
  ## Configure extra options for nomad containers' liveness and readiness probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param nomad.livenessProbe.enabled Enable livenessProbe on nomad containers
  ## @param nomad.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param nomad.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param nomad.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param nomad.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param nomad.livenessProbe.successThreshold Success threshold for livenessProbe
  ## ref: https://developer.hashicorp.com/nomad/api-docs/status#read-leader
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 180
    periodSeconds: 300
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    exec:
      command:
        - nomad
        - server
        - members
  ## @param nomad.readinessProbe.enabled Enable readinessProbe on nomad containers
  ## @param nomad.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param nomad.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param nomad.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param nomad.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param nomad.readinessProbe.successThreshold Success threshold for readinessProbe
  ## note: podman not support readinessProbe currently
  ##
  readinessProbe:
    enabled: false
    initialDelaySeconds: 180
    periodSeconds: 300
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    httpGet:
      path: /v1/status/leader
      port: 8500
  ## @param nomad.startupProbe.enabled Enable startupProbe on nomad containers
  ## @param nomad.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
  ## @param nomad.startupProbe.periodSeconds Period seconds for startupProbe
  ## @param nomad.startupProbe.timeoutSeconds Timeout seconds for startupProbe
  ## @param nomad.startupProbe.failureThreshold Failure threshold for startupProbe
  ## @param nomad.startupProbe.successThreshold Success threshold for startupProbe
  ##
  startupProbe:
    enabled: false
    initialDelaySeconds: foo
    periodSeconds: bar
    timeoutSeconds: foo
    failureThreshold: bar
    successThreshold: foo
  ## @param nomad.customLivenessProbe Custom livenessProbe that overrides the default one
  ##
  customLivenessProbe: {}
  ## @param nomad.customReadinessProbe Custom readinessProbe that overrides the default one
  ##
  customReadinessProbe: {}
  ## @param nomad.customStartupProbe Custom startupProbe that overrides the default one
  ##
  customStartupProbe: {}
  ## nomad resource requests and limits
  ## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param nomad.resourcesPreset Set nomad container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if nomad.resources is set (nomad.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param nomad.resources Set nomad container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Configure Pods Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param nomad.podSecurityContext.enabled Enabled nomad pods' Security Context
  ## @param nomad.podSecurityContext.fsGroup Set nomad pod's Security Context fsGroup
  ##
  podSecurityContext:
    enabled: false
  ## Configure Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param nomad.containerSecurityContext.enabled Enabled nomad containers' Security Context
  ## @param nomad.containerSecurityContext.runAsUser Set nomad containers' Security Context runAsUser
  ## @param nomad.containerSecurityContext.runAsNonRoot Set nomad containers' Security Context runAsNonRoot
  ## @param nomad.containerSecurityContext.readOnlyRootFilesystem Set nomad containers' Security Context runAsNonRoot
  ##
  containerSecurityContext:
    enabled: false
    runAsGroup: 1000
    runAsUser: 100
    runAsNonRoot: true
    readOnlyRootFilesystem: true

  # %%OTHER_PARAMETERS_RELATED_TO_THIS_CONTAINER/POD%%

  ## @param nomad.configFiles config files to start nomad
  ## The sub config block will convert to json and injected as ConfigMap and mount into /nomad/config/***.json
  ## You can add whatever sub items under this block
  ## ref: https://developer.hashicorp.com/nomad/docs/configuration
  ##
  configFiles:
    ## @param nomad.configFiles.main General config for server and client agent
    ## The config under this node will convert to json file and place in /nomad/config/main.json
    ## https://developer.hashicorp.com/nomad/docs/configuration#general-parameters
    ##
    main:
      ## @param nomad.configFiles.main.bind_addr The address that should be bound to for internal cluster communications.
      ## This is an IP address that should be reachable by all other nodes in the cluster.
      ## By default, this is "0.0.0.0", meaning nomad will bind to all addresses on the local machine and will advertise the private IPv4 address to the rest of the cluster.
      ## If there are multiple private IPv4 addresses available, nomad will exit with an error at startup.
      ## ref:https://developer.hashicorp.com/nomad/docs/configuration#bind_addr
      ##
      bind_addr: "0.0.0.0"
      ## @param nomad.configFiles.main.addresses Specifies the bind address for individual network services.
      ## Any values configured in this block take precedence over the default bind_addr.
      ## These values should be specified in IP format without a port (ex. "0.0.0.0"). To set the port, refer to the ports field.
      ## ref: https://developer.hashicorp.com/nomad/docs/configuration#addresses
      ##
      # addresses:
      ## @param nomad.configFiles.main.advertise Specifies the advertise address for individual network services.
      ## This can be used to advertise a different address to the peers of a server or a client node to support more complex network configurations such as NAT.
      ## This configuration is optional, and defaults to the bind address of the specific network service if it is not provided.
      ## Any values configured in this block take precedence over the default bind_addr.
      ## ref: https://github.com/btkrausen/hashicorp/blob/fef6199e907d4b258e28d21de7033211112f909a/nomad/server_config.hcl#L70
      ## ref: https://developer.hashicorp.com/nomad/docs/configuration#advertise
      ##
      # advertise:
      ## @param nomad.configFiles.main.datacenter This flag controls the datacenter in which the agent is running.
      ## If not provided, it defaults to "dc1".
      ## ref: https://developer.hashicorp.com/nomad/docs/configuration#datacenter
      ##
      datacenter: dc1
      ## @param nomad.configFiles.main.data_dir Specifies a local directory used to store agent state.
      ## Client nodes use this directory by default to store temporary allocation data as well as cluster information.
      ## Server nodes use this directory to store cluster state, including the replicated log and snapshot data.
      ## This must be specified as an absolute path. Nomad will create the directory on the host, if it does not exist when the agent process starts.
      ## ref: https://developer.hashicorp.com/nomad/docs/configuration#data_dir
      ##
      data_dir: /nomad/data
      ## @param nomad.configFiles.main.disable_update_check Specifies if Nomad should not check for updates and security bulletins.
      ## ref: https://developer.hashicorp.com/nomad/docs/configuration#disable_update_check
      ##
      disable_update_check: true
      ## @param nomad.configFiles.main.name Specifies the name of the local node.
      ## This value is used to identify individual agents. When specified on a server, the name must be unique within the region.
      ## ref: https://developer.hashicorp.com/nomad/docs/configuration#name
      ##
      name: nomad_server
      ## @param nomad.configFiles.main.ports This is a nested object that allows setting the bind ports for the following keys
      ## ref: https://developer.hashicorp.com/nomad/docs/configuration#ports
      ##
      ports: {}
      ## @param nomad.configFiles.main.acl
      ## This object allows a number of sub-keys to be set which controls the ACL system.
      ## Configuring the ACL system within the ACL stanza was added in nomad 1.4.0
      ## ref: https://developer.hashicorp.com/nomad/docs/configuration/acl
      ##
      acl:
        ## @param nomad.configFile.main.enabled Specifies if ACL enforcement is enabled. All other ACL configuration options depend on this value.
        ## All agents should have the same value for this parameter.
        ## ref: https://developer.hashicorp.com/nomad/docs/configuration/acl
        ##
        enabled: false
      ## @param nomad.configFiles.main.server Nomad agent server mode in the server block of a Nomad agent configuration
      ## Server mode lets the agent participate in scheduling decisions, register with service discovery, and handle join failures
      ## The config under this node will convert to json file and place in /nomad/config/server.json
      ## ref: https://developer.hashicorp.com/nomad/docs/configuration/server
      ##
      server:
        ## @param nomad.configFiles.main.server.bootstrap_expect Specifies the number of server nodes to wait for before bootstrapping.
        ## It is most common to use the odd-numbered integers 3 or 5 for this value, depending on the cluster size.
        ## A value of 1 does not provide any fault tolerance and is not recommended for production use cases.
        ## ref: https://developer.hashicorp.com/nomad/docs/configuration/server#bootstrap_expect
        ##
        bootstrap_expect: 1
        ## @param nomad.configFiles.main.server.enabled Specifies if this agent should run in server mode. All other server options depend on this value being set
        ## ref: https://developer.hashicorp.com/nomad/docs/configuration/server#enabled
        ##
        enabled: true
        ## @param nomad.configFiles.main.server.encrypt Specifies the secret key to use for encryption of Nomad server's gossip network traffic.
        ## This key must be 32 bytes that are RFC4648 "URL and filename safe" base64-encoded.
        ## You can generate an appropriately-formatted key with the nomad operator gossip keyring generate command.
        ## The provided key is automatically persisted to the data directory and loaded automatically whenever the agent is restarted. This means that to encrypt Nomad server's gossip protocol, this option only needs to be provided once on each agent's initial startup sequence.
        ## If it is provided after Nomad has been initialized with an encryption key, then the provided key is ignored and a warning will be displayed
        ## ref: https://developer.hashicorp.com/nomad/docs/configuration/server#encrypt
        ##
        encrypt: 6RhfKFZ5uYEaU6RgWzx69ssLcpiIkvnEZs5KBOQxvxA=
      ## @param nomad.configFiles.ui configuring Nomad's web UI in the ui block of a Nomad agent configuration.
      ## Provide Vault and Consul links, add custom text to display in Nomad's UI, and define the HTTP Content Security Policy response header.
      ## ref: https://developer.hashicorp.com/nomad/docs/configuration/ui
      ##
      ui:
        ## @param nomad.configFiles.ui.ui_config.enabled This enables the service of the web UI from this agent
        ## ref: https://developer.hashicorp.com/nomad/docs/configuration/ui#enabled
        ##
        enabled: true
      ## @param nomad.configFiles.tls configuring secure communication in the tls block of a Nomad agent configuration.
      ## Enable TLS on Raft traffic and RFC and HTTP endpoints.
      ## This block should better set together with below nomad.tls block
      ## ref: https://developer.hashicorp.com/nomad/docs/configuration/tls
      ##
      tls:
        ## @param nomad.configFiles.tls.http Specifies if TLS should be enabled on the HTTP endpoints on the Nomad agent, including the API.
        ## By default this is non-mutual TLS. You can upgrade this to mTLS by setting verify_https_client=true,
        ## but this can complicate using the Nomad UI by requiring mTLS in your browser or running a proxy in front of the Nomad UI.
        ## ref: https://developer.hashicorp.com/nomad/docs/configuration/tls#http
        ##
        http: false
        ## @param nomad.configFiles.tls.rpc Toggle the option to enable mTLS on the RPC endpoints and Raft traffic.
        ## When this setting is activated, it establishes protection both between Nomad servers and from the clients back to the servers,
        ## ensuring mutual authentication. Setting rpc=true is required for secure operation of Nomad.
        ## ref: https://developer.hashicorp.com/nomad/docs/configuration/tls#rpc
        rpc: false

  ## @param nomad.tls secret setting of cert and key or whatever tls content will set in the container
  ##
  tls:
    ## @param nomad.tls.mountPath secret mount path setting of cert and key or whatever tls content will set in the container
    ##
    mountPath: /nomad/config/certs
    ## @param nomad.tls.contents secret content of cert and key or whatever tls content will set in the container
    ## You can set the content key as whatever file name you like
    ## But the tls set in configFiles above must match with the settings here
    ## key and certificate should start with -----BEGIN CERTIFICATE----- or -----BEGIN RSA PRIVATE KEY-----
    ## e.g.
    ## contents:
    ##  nomad-agent-ca.pem: ""
    ##  dc1-server-nomad-1.pem: ""
    ##  dc1-server-nomad-1-key.pem: ""
    ##
    contents: {}

  ## @param nomad.existingConfigmap The name of an existing ConfigMap with your custom configuration for nomad
  ##
  existingConfigmap:
  ## @param nomad.command Override default container command (useful when using custom images)
  ##
  command: []
  ## @param nomad.args Override default container args (useful when using custom images)
  ##
  args:
    - agent
    - -config=/nomad/config
  ## @param nomad.hostAliases nomad pods host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param nomad.podLabels Extra labels for nomad pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param nomad.podAnnotations Annotations for nomad pods
  ## to keep container user as same permission as host user, set keep-id point to the container user and group id
  ## the userns annotation only work podman v4.9+
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ## ref: https://github.com/containers/podman/discussions/22378
  ## e.g.
  ## podAnnotations:
  ##   io.podman.annotations.userns: keep-id:uid=100,gid=1000
  ##
  podAnnotations: {}
  ## Autoscaling configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  ## @param nomad.autoscaling.enabled Enable autoscaling for nomad
  ## @param nomad.autoscaling.minReplicas Minimum number of nomad replicas
  ## @param nomad.autoscaling.maxReplicas Maximum number of nomad replicas
  ## @param nomad.autoscaling.targetCPU Target CPU utilization percentage
  ## @param nomad.autoscaling.targetMemory Target Memory utilization percentage
  ##
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""

  ## @param nomad.extraEnvVars Array with extra environment variables to add to nomad nodes
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  ## @param nomad.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for nomad nodes
  ##
  extraEnvVarsCM: ""
  ## @param nomad.extraEnvVarsSecret Name of existing Secret containing extra env vars for nomad nodes
  ##
  extraEnvVarsSecret: ""
  ## @param nomad.extraVolumes Optionally specify extra list of additional volumes for the nomad pod(s)
  ##
  extraVolumes: []
  ## @param nomad.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the nomad container(s)
  ##
  extraVolumeMounts: []
  ## @param nomad.sidecars Add additional sidecar containers to the nomad pod(s)
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: []
  ## @param nomad.initContainers Add additional init containers to the nomad pod(s)
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']
  ##
  initContainers: []

## @section Persistence Parameters
##

## Enable persistence using Persistent Volume Claims
## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  ## @param persistence.enabled Enable persistence using Persistent Volume Claims
  ##
  enabled: true
  ## @param persistence.mountPath Path to mount the volume at.
  ##
  mountPath: /nomad/data
  ## @param persistence.subPath The subdirectory of the volume to mount to, useful in dev environments and one PV for multiple services
  ##
  subPath: ""
  ## @param persistence.storageClass Storage class of backing PVC
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: ""
  ## @param persistence.annotations Persistent Volume Claim annotations
  ##
  annotations: {}
  ## @param persistence.accessModes Persistent Volume Access Modes
  ##
  accessModes:
    - ReadWriteOnce
  ## @param persistence.size Size of data volume
  ##
  size: 8Gi
  ## @param persistence.existingClaim The name of an existing PVC to use for persistence
  ##
  existingClaim: ""
  ## @param persistence.dataSource Custom PVC data source
  ##
  dataSource: {}
## @section Init Container Parameters
##

## 'volumePermissions' init container parameters
## Changes the owner and group of the persistent volume mount point to runAsUser:fsGroup values
##   based on the *podSecurityContext/*containerSecurityContext parameters
##
volumePermissions:
  ## @param volumePermissions.enabled Enable init container that changes the owner/group of the PV mount point to `runAsUser:fsGroup`
  ##
  enabled: false
  ## OS Shell + Utility image
  ## ref: https://hub.docker.com/r/bitnami/os-shell/tags/
  ## @param volumePermissions.image.registry OS Shell + Utility image registry
  ## @param volumePermissions.image.repository OS Shell + Utility image repository
  ## @param volumePermissions.image.tag OS Shell + Utility image tag (immutable tags are recommended)
  ## @param volumePermissions.image.pullPolicy OS Shell + Utility image pull policy
  ## @param volumePermissions.image.pullSecrets OS Shell + Utility image pull secrets
  ##
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 11-debian-11-r%%IMAGE_REVISION%%
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## Init container's resource requests and limits
  ## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param volumePermissions.resourcesPreset Set init container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if volumePermissions.resources is set (volumePermissions.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param volumePermissions.resources Set init container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Init container Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param volumePermissions.containerSecurityContext.runAsUser Set init container's Security Context runAsUser
  ## NOTE: when runAsUser is set to special value "auto", init container will try to chown the
  ##   data folder to auto-determined user&group, using commands: `id -u`:`id -G | cut -d" " -f2`
  ##   "auto" is especially useful for OpenShift which has scc with dynamic user ids (and 0 is not allowed)
  ##
  containerSecurityContext:
    runAsUser: 0
## @section Other Parameters
##

