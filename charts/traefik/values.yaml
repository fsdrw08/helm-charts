## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
##

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
## @param global.storageClass Global StorageClass for Persistent Volume(s)
##
global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  storageClass: ""

## @section Common parameters
##
## @param nameOverride String to partially override common.names.name
##
nameOverride: ""
## @param fullnameOverride String to fully override common.names.fullname
##
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}

## @param deployKind specify the deploy kindï¼š Pod, or Deployment
deployKind: Pod
## @section traefik Parameters
##

## %%MAIN_CONTAINER/POD_DESCRIPTION%%
##
traefik:
  ## traefik image
  ## ref: https://hub.docker.com/r/bitnami/%%IMAGE_NAME%%/tags/
  ## @param traefik.image.registry traefik image registry
  ## @param traefik.image.repository traefik image repository
  ## @param traefik.image.tag traefik image tag (immutable tags are recommended)
  ## @param traefik.image.digest traefik image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)
  ## @param traefik.image.pullPolicy traefik image pull policy
  ## @param traefik.image.pullSecrets traefik image pull secrets
  ##
  image:
    registry: docker.io
    repository: library/traefik
    tag: latest
    digest: ""
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## @param traefik.podRestartPolicy specify the pod restart policy if deployKind set to Pod
  ## available options: Always, OnFailure, Never
  podRestartPolicy: Never
  ## @param traefik.replicaCount Number of traefik replicas to deploy
  ##
  replicaCount: 1
  ## @param traefik.containerPorts traefik container port to expose to host
  ## containerPorts:
  ##   - name: http
  ##     containerPort: 80
  ##     hostIP: 192.168.255.10
  ##     protocol: TCP
  ##   - name: https
  ##     containerPort: 443
  ##     hostIP: 192.168.255.10
  ##     protocol: TCP
  ##
  containerPorts:
    - name: http
      containerPort: 80
      hostPort: 80
      protocol: TCP
    - name: https
      containerPort: 443
      hostPort: 443
      protocol: TCP
  ## Configure extra options for traefik containers' liveness and readiness probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param traefik.livenessProbe.enabled Enable livenessProbe on traefik containers
  ## @param traefik.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param traefik.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param traefik.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param traefik.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param traefik.livenessProbe.successThreshold Success threshold for livenessProbe
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 120
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 1
    exec:
      command:
        - traefik
        - healthcheck
  ## @param traefik.readinessProbe.enabled Enable readinessProbe on traefik containers
  ## @param traefik.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param traefik.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param traefik.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param traefik.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param traefik.readinessProbe.successThreshold Success threshold for readinessProbe
  ## note: podman not support readinessProbe currently
  ##
  readinessProbe:
    enabled: false
    initialDelaySeconds: 60
    periodSeconds: 120
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 1
    exec:
      command:
        - traefik
        - healthcheck
  ## @param traefik.startupProbe.enabled Enable startupProbe on traefik containers
  ## @param traefik.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
  ## @param traefik.startupProbe.periodSeconds Period seconds for startupProbe
  ## @param traefik.startupProbe.timeoutSeconds Timeout seconds for startupProbe
  ## @param traefik.startupProbe.failureThreshold Failure threshold for startupProbe
  ## @param traefik.startupProbe.successThreshold Success threshold for startupProbe
  ##
  startupProbe:
    enabled: false
    initialDelaySeconds: foo
    periodSeconds: bar
    timeoutSeconds: foo
    failureThreshold: bar
    successThreshold: foo
  ## @param traefik.customLivenessProbe Custom livenessProbe that overrides the default one
  ##
  customLivenessProbe: {}
  ## @param traefik.customReadinessProbe Custom readinessProbe that overrides the default one
  ##
  customReadinessProbe: {}
  ## @param traefik.customStartupProbe Custom startupProbe that overrides the default one
  ##
  customStartupProbe: {}
  ## traefik resource requests and limits
  ## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param traefik.resourcesPreset Set traefik container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if %%MAIN_OBJECT_BLOCK%%.resources is set (%%MAIN_OBJECT_BLOCK%%.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param traefik.resources Set traefik container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Configure Pods Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param traefik.podSecurityContext.enabled Enabled traefik pods' Security Context
  ## @param traefik.podSecurityContext.fsGroup Set traefik pod's Security Context fsGroup
  ##
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  ## Configure Container Security Context
  ## @param traefik.containerSecurityContext.enabled Enabled traefik containers' Security Context
  ## @param traefik.containerSecurityContext.runAsUser Set traefik containers' Security Context runAsUser
  ## @param traefik.containerSecurityContext.runAsNonRoot Set traefik containers' Security Context runAsNonRoot
  ## @param traefik.containerSecurityContext.readOnlyRootFilesystem Set traefik containers' Security Context runAsNonRoot
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## ref: https://unix.stackexchange.com/questions/580339/how-to-grant-read-write-access-through-selinux-policy-to-a-bind-mounted-volume-v/595152#595152
  ## ref: https://github.com/containers/podman/pull/5307#issuecomment-590830455
  ## e.g. to disable selinux label for socket read from container
  ## containerSecurityContext:
  ##   enabled: true
  ##   seLinuxOptions:
  ##     type: spc_t
  containerSecurityContext:
    enabled: false
    # runAsUser: 1001
    # runAsNonRoot: true
    # readOnlyRootFilesystem: false

  ## %%OTHER_PARAMETERS_RELATED_TO_THIS_CONTAINER/POD%%

  ## @param traefik.staticConfiguration
  # https://doc.traefik.io/traefik/getting-started/configuration-overview/#the-static-configuration
  staticConfiguration:
    ## @param traefik.staticConfiguration.providers
    ## ref: https://doc.traefik.io/traefik/providers/overview/
    ##
    providers:
      ## @param traefik.staticConfiguration.providers.docker
      ## Config docker provider to let traefik understand how to route the traffic by reading docker label information
      ## ref: https://doc.traefik.io/traefik/providers/docker/
      ##
      docker:
        endpoint: unix:///var/run/docker.sock
        useBindPortIP: false
        exposedByDefault: false
      ## @param traefik.staticConfiguration.providers.file
      ## @param traefik.staticConfiguration.providers.file.directory
      ## Config The file provider let traefik understand how to route the traffic by reading the YAML or TOML file
      ## ref: https://doc.traefik.io/traefik/providers/file/
      ##
      file:
        directory: /etc/traefik/dynamic
        watch: true
    ## @param traefik.staticConfiguration.serversTransport
    ## ref: https://doc.traefik.io/traefik/routing/overview/#transport-configuration
    serversTransport:
      insecureSkipVerify: false
    ## @param traefik.staticConfiguration.globalArguments global arguments
    ## e.g.
    ## globalArguments:
    ##   checkNewVersion: false
    ##   sendAnonymousUsage: false
    ##
    globalArguments: {}
    ## @param traefik.staticConfiguration.entryPoints
    ## ref: https://doc.traefik.io/traefik/routing/overview/
    ##
    entryPoints:
      traefik:
        address: ":9000"
      web:
        address: ":80"
        forwardedHeaders:
          trustedIPs: []
      # https://community.traefik.io/t/lets-encrypt-x509-certificate-signed-by-unknown-authority/11112/1
      webSecure:
        address: ":443"
        # https://doc.traefik.io/traefik/routing/entrypoints/#forwarded-headers
        # https://community.traefik.io/t/how-to-get-real-ip-from-the-client/8239
        # https://www.bboy.app/2020/04/16/traefik%E5%90%8E%E7%AB%AF%E5%BA%94%E7%94%A8%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E7%9C%9F%E5%AE%9Eip/
        forwardedHeaders:
          trustedIPs: []
    ## @param traefik.staticConfiguration.api
    ## Traefik exposes a number of information through an API handler
    ##
    api:
      dashboard: true
    ## @param traefik.staticConfiguration.certificatesResolvers
    ## ref: https://doc.traefik.io/traefik/https/acme/
    ## e.g.
    ## certificatesResolvers:
    ##   external:
    ##     acme:
    ##       caServer: https://acme-v02.api.letsencrypt.org/directory
    ##       certificatesDuration: 2160
    ##       email:
    ##       storage: /mnt/acmeStorage/external_acme.json
    ##       tlsChallenge: {}
    ##   internal:
    ##     acme:
    ##       caServer:
    ##       certificatesDuration: 2160
    ##       email:
    ##       storage: /mnt/acmeStorage/internal_acme.json
    ##       tlsChallenge: {}
    ##
    certificatesResolvers: null
    ## @param traefik.staticConfiguration.log
    ## ref: https://doc.traefik.io/traefik/observability/logs/
    ##
    log:
      ## @param traefik.staticConfiguration.log.level
      ## Alternative logging levels are DEBUG, INFO, WARN, ERROR, FATAL, and PANIC.
      level: ERROR
    ## @param traefik.staticConfiguration.ping Checking the Health of Your Traefik Instances
    ## ref: https://doc.traefik.io/traefik/operations/ping/
    ##
    ping: {}
  ## @param traefik.dynamicConfigurationFile
  ## The file provider lets you define the dynamic configuration in a YAML or TOML file.
  ## The block define here will put into configMap and let traefik treat as dynamic file configuration file.
  ## The values will render as a yaml file put into configmap then mount to the path set in traefik.staticConfiguration.providers.file.directory
  ## ref: https://doc.traefik.io/traefik/providers/file/
  ##
  dynamicConfigurationFiles:
    mwToHttps.yaml:
      http:
        middlewares:
          toHttps:
            redirectScheme:
              scheme: https
              permanent: true
    # tlsCerts:
    #   tls:
    #     certificates:
    #       - certFile: /etc/traefik/tls/domain.crt
    #         keyFile: /etc/traefik/tls/domain.key
  ## @param traefik.tls secret setting of cert and key or whatever tls content will set in the container
  ## @param traefik.tls.mountPath secret mount path setting of cert and key or whatever tls content will set in the container
  ##
  tls:
    mountPath: /etc/traefik/tls
    ## @param traefik.tls.content secret content of cert and key or whatever tls content will set in the container
    ## You can set the content key as whatever file name you like
    ## But the tls set in configFiles above must match with the settings here
    ## key and certificate should start with -----BEGIN CERTIFICATE----- or -----BEGIN RSA PRIVATE KEY-----
    ## e.g.
    ## contents:
    ##  ca.crt: ""
    ##  tls.crt: ""
    ##  tls.key: ""
    ##
    contents: {}
  ## @param traefik.existingConfigmap The name of an existing ConfigMap with your custom configuration for traefik
  ##
  existingConfigmap:
  ## @param traefik.command Override default container command (useful when using custom images)
  ##
  command: []
  ## @param traefik.args Override default container args (useful when using custom images)
  ##
  args: []
  ## @param traefik.hostAliases traefik pods host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param traefik.podLabels Extra labels for traefik pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param traefik.podAnnotations Annotations for traefik pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ## e.g.
  ## podAnnotations:
  ##  io.podman.annotations.label: disable
  podAnnotations: {}
  ## Autoscaling configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  ## @param traefik.autoscaling.enabled Enable autoscaling for traefik
  ## @param traefik.autoscaling.minReplicas Minimum number of traefik replicas
  ## @param traefik.autoscaling.maxReplicas Maximum number of traefik replicas
  ## @param traefik.autoscaling.targetCPU Target CPU utilization percentage
  ## @param traefik.autoscaling.targetMemory Target Memory utilization percentage
  ##
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""

  ## @param traefik.extraEnvVars Array with extra environment variables to add to traefik nodes
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##   # below env var make traefik trust a custom root ca, it is used interact with self host acme server
  ##   # ref: https://smallstep.com/blog/private-acme-server/#:~:text=To%20get%20a%20certificate%20from%20step%2Dca%20to%20Traefik%20you%20need%20to%3A
  ##   # ref: https://github.com/traefik/traefik/issues/5196
  ##   - name: LEGO_CA_CERTIFICATES
  ##     value: /etc/traefik/tls/rootca.crt
  ##   # below env var let traefik not only trust custom root ca, but also trust system builtin ca certs
  ##   # ref: https://github.com/go-acme/lego/blob/96bb0ba904fc5c818780aa1edcde56731a61b9db/lego/client_config.go#L28
  ##   - name: LEGO_CA_SYSTEM_CERT_POOL
  ##     value: "true"
  ##
  extraEnvVars: []
  ## @param traefik.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for traefik nodes
  ##
  extraEnvVarsCM: ""
  ## @param traefik.extraEnvVarsSecret Name of existing Secret containing extra env vars for traefik nodes
  ##
  extraEnvVarsSecret: ""
  ## @param traefik.extraVolumes Optionally specify extra list of additional volumes for the traefik pod(s)
  ## e.g.
  ## extraVolumes:
  ##   - name: acmeStorage
  ##     persistentVolumeClaim:
  ##       claimName: traefik-pvc
  ##
  extraVolumes:
    - name: docker-socket
      hostPath:
        path: /run/user/1001/podman/podman.sock
        type: Socket
  ## @param traefik.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the traefik container(s)
  ## e.g.
  ## extraVolumeMounts:
  ##   - name: acmeStorage
  ##     mountPath: /mnt/acmeStorage
  ##
  extraVolumeMounts:
    - name: docker-socket
      mountPath: "/var/run/docker.sock"
      readOnly: true
  ## @param traefik.sidecars Add additional sidecar containers to the traefik pod(s)
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: []
  ## @param traefik.initContainers Add additional init containers to the traefik pod(s)
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']
  ##
  initContainers: []

## @section Persistence Parameters
##

## Enable persistence using Persistent Volume Claims
## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  ## @param persistence.enabled Enable persistence using Persistent Volume Claims
  ##
  enabled: false
  ## @param persistence.mountPath Path to mount the volume at.
  ##
  mountPath: /mnt
  ## @param persistence.subPath The subdirectory of the volume to mount to, useful in dev environments and one PV for multiple services
  ##
  subPath: ""
  ## @param persistence.storageClass Storage class of backing PVC
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: ""
  ## @param persistence.annotations Persistent Volume Claim annotations
  ##
  annotations: {}
  ## @param persistence.accessModes Persistent Volume Access Modes
  ##
  accessModes:
    - ReadWriteOnce
  ## @param persistence.size Size of data volume
  ##
  size: 8Gi
  ## @param persistence.existingClaim The name of an existing PVC to use for persistence
  ##
  existingClaim: ""
  ## @param persistence.dataSource Custom PVC data source
  ##
  dataSource: {}
## @section Init Container Parameters
##

## 'volumePermissions' init container parameters
## Changes the owner and group of the persistent volume mount point to runAsUser:fsGroup values
##   based on the *podSecurityContext/*containerSecurityContext parameters
##
volumePermissions:
  ## @param volumePermissions.enabled Enable init container that changes the owner/group of the PV mount point to `runAsUser:fsGroup`
  ##
  enabled: false
  ## OS Shell + Utility image
  ## ref: https://hub.docker.com/r/bitnami/os-shell/tags/
  ## @param volumePermissions.image.registry OS Shell + Utility image registry
  ## @param volumePermissions.image.repository OS Shell + Utility image repository
  ## @param volumePermissions.image.tag OS Shell + Utility image tag (immutable tags are recommended)
  ## @param volumePermissions.image.pullPolicy OS Shell + Utility image pull policy
  ## @param volumePermissions.image.pullSecrets OS Shell + Utility image pull secrets
  ##
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 11-debian-11-r%%IMAGE_REVISION%%
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## Init container's resource requests and limits
  ## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param volumePermissions.resourcesPreset Set init container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if volumePermissions.resources is set (volumePermissions.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param volumePermissions.resources Set init container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Init container Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param volumePermissions.containerSecurityContext.runAsUser Set init container's Security Context runAsUser
  ## NOTE: when runAsUser is set to special value "auto", init container will try to chown the
  ##   data folder to auto-determined user&group, using commands: `id -u`:`id -G | cut -d" " -f2`
  ##   "auto" is especially useful for OpenShift which has scc with dynamic user ids (and 0 is not allowed)
  ##
  containerSecurityContext:
    runAsUser: 0
## @section Other Parameters
##
