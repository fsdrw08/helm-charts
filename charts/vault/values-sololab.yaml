vault:
  ## hashicorp vault image
  ## ref: https://hub.docker.com/r/hashicorp/vault/tags/
  ## @param vault.image.registry vault image registry
  ## @param vault.image.repository vault image repository
  ## @param vault.image.tag vault image tag (immutable tags are recommended)
  ## @param vault.image.digest vault image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)
  ## @param vault.image.pullPolicy vault image pull policy
  ## @param vault.image.pullSecrets vault image pull secrets
  ##
  image:
    registry: zot.mgmt.sololab
    repository: hashicorp/vault
    tag: 1.16.2

  ## @param vault.configFiles config file to start vault, the sub config block will convert to json and injected as ConfigMap
  ## You can add whatever sub items under this block
  ## ref: https://developer.hashicorp.com/vault/docs/configuration
  ## ref: https://developer.hashicorp.com/vault/tutorials/operations/configure-vault#config
  configFiles:
    ## @param vault.configFiles.main main config for server
    main:
      ## @param vault.configFiles.disable_mlock
      ## Disables the server from executing the mlock syscall
      ## Disabling mlock is strongly recommended if using integrated storage due to the fact that mlock does not interact well with memory mapped files such as those created by BoltDB, which is used by Raft to track state.
      ## https://developer.hashicorp.com/vault/docs/configuration#disable_mlock
      disable_mlock: true
      log_level: info
    ## @param vault.configFiles.storage storage config for server
    storage:
      ## @param vault.configFiles.storage
      ## The storage stanza configures the storage backend, which represents the location for the durable storage of Vault's information
      ## https://developer.hashicorp.com/vault/docs/configuration/storage
      ## https://github.com/kirubasankars/bedrock/blob/b2037fb394d149a9fed560cc60d284b28b4585fb/src/main/agent/vault/config/vault.json#L3
      storage:
        file:
          path: /vault/data
    ## @param vault.configFiles.listeners listeners config for server
    listeners:
      ## @param vault.configFiles.ui
      ## Enables the built-in web UI, which is available on all listeners (address + port) at the /ui path.
      ## Browsers accessing the standard Vault API address will automatically redirect there.
      ## This can also be provided via the environment variable VAULT_UI.
      ## The UI runs on the same port as the Vault listener. As such, you must configure at least one listener stanza in order to access the UI.
      ## For more information, please see the https://developer.hashicorp.com/vault/docs/configuration/ui.
      ui: true
      ## @param vault.configFiles.listener
      ## Configures how Vault is listening for API requests.
      ## https://developer.hashicorp.com/vault/docs/configuration/listener/tcp
      ## https://github.com/hashicorp/vault/blob/aaf59a7705bb6c1d6ba2f6c2400787d5da872817/command/server/test-fixtures/config4.hcl.json#L6
      ## https://github.com/hashicorp/vault-helm/blob/main/values.yaml#L931
      listener:
        - tcp:
            tls_disable: false
            address: "[::]:8200"
            cluster_address: "[::]:8201"
            # https://github.com/hashicorp/vault/blob/2718994242f94df3dc90215b2ecbc5d4198d9e3c/website/content/docs/platform/k8s/helm/examples/standalone-tls.mdx#L191
            tls_cert_file: /vault/userconfig/vault-server-tls/tls.crt
            tls_key_file: /vault/userconfig/vault-server-tls/tls.key
            tls_disable_client_certs: true

  ## @param vault.tls secret of cert and key for listener
  ## If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  tls:
    crt: ""
    key: ""

  ## @param vault.existingConfigmap The name of an existing ConfigMap with your custom configuration for %%MAIN_CONTAINER_NAME%%
  ##
  existingConfigmap:
  ## @param vault.command Override default container command (useful when using custom images)
  ##
  command: []
  ## @param vault.args Override default container args (useful when using custom images)
  ##
  args: []
  ## @param vault.hostAliases %%MAIN_CONTAINER_NAME%% pods host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param vault.podLabels Extra labels for %%MAIN_CONTAINER_NAME%% pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param vault.podAnnotations Annotations for %%MAIN_CONTAINER_NAME%% pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}
  ## Autoscaling configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  ## @param vault.autoscaling.enabled Enable autoscaling for vault
  ## @param vault.autoscaling.minReplicas Minimum number of vault replicas
  ## @param vault.autoscaling.maxReplicas Maximum number of vault replicas
  ## @param vault.autoscaling.targetCPU Target CPU utilization percentage
  ## @param vault.autoscaling.targetMemory Target Memory utilization percentage
  ##
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""

  ## @param vault.extraEnvVars Array with extra environment variables to add to %%MAIN_CONTAINER_NAME%% nodes
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param vault.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for %%MAIN_CONTAINER_NAME%% nodes
  ##
  extraEnvVarsCM: ""
  ## @param vault.extraEnvVarsSecret Name of existing Secret containing extra env vars for %%MAIN_CONTAINER_NAME%% nodes
  ##
  extraEnvVarsSecret: ""
  ## @param vault.extraVolumes Optionally specify extra list of additional volumes for the %%MAIN_CONTAINER_NAME%% pod(s)
  ##
  extraVolumes: []
  ## @param vault.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the %%MAIN_CONTAINER_NAME%% container(s)
  ##
  extraVolumeMounts: []
  ## @param vault.sidecars Add additional sidecar containers to the %%MAIN_CONTAINER_NAME%% pod(s)
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: []
  ## @param vault.initContainers Add additional init containers to the %%MAIN_CONTAINER_NAME%% pod(s)
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']
  ##
  initContainers: []

## @section Persistence Parameters
##

## Enable persistence using Persistent Volume Claims
## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  ## @param persistence.enabled Enable persistence using Persistent Volume Claims
  ##
  enabled: true
  ## @param persistence.mountPath Path to mount the volume at.
  ##
  mountPath: "/vault/data"
  ## @param persistence.subPath The subdirectory of the volume to mount to, useful in dev environments and one PV for multiple services
  ##
  subPath: ""
  ## @param persistence.storageClass Storage class of backing PVC
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: ""
  ## @param persistence.annotations Persistent Volume Claim annotations
  ##
  annotations: {}
  ## @param persistence.accessModes Persistent Volume Access Modes
  ##
  accessModes:
    - ReadWriteOnce
  ## @param persistence.size Size of data volume
  ##
  size: 8Gi
  ## @param persistence.existingClaim The name of an existing PVC to use for persistence
  ##
  existingClaim: ""
  ## @param persistence.dataSource Custom PVC data source
  ##
  dataSource: {}
## @section Init Container Parameters
##

## 'volumePermissions' init container parameters
## Changes the owner and group of the persistent volume mount point to runAsUser:fsGroup values
##   based on the *podSecurityContext/*containerSecurityContext parameters
##
volumePermissions:
  ## @param volumePermissions.enabled Enable init container that changes the owner/group of the PV mount point to `runAsUser:fsGroup`
  ##
  enabled: false
  ## OS Shell + Utility image
  ## ref: https://hub.docker.com/r/bitnami/os-shell/tags/
  ## @param volumePermissions.image.registry OS Shell + Utility image registry
  ## @param volumePermissions.image.repository OS Shell + Utility image repository
  ## @param volumePermissions.image.tag OS Shell + Utility image tag (immutable tags are recommended)
  ## @param volumePermissions.image.pullPolicy OS Shell + Utility image pull policy
  ## @param volumePermissions.image.pullSecrets OS Shell + Utility image pull secrets
  ##
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 11-debian-11-r%%IMAGE_REVISION%%
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## Init container's resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ## @param volumePermissions.resources.limits The resources limits for the init container
  ## @param volumePermissions.resources.requests The requested resources for the init container
  ##
  resources:
    limits: {}
    requests: {}
  ## Init container Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param volumePermissions.containerSecurityContext.runAsUser Set init container's Security Context runAsUser
  ## NOTE: when runAsUser is set to special value "auto", init container will try to chown the
  ##   data folder to auto-determined user&group, using commands: `id -u`:`id -G | cut -d" " -f2`
  ##   "auto" is especially useful for OpenShift which has scc with dynamic user ids (and 0 is not allowed)
  ##
  containerSecurityContext:
    runAsUser: 0

## @section Other Parameters
##

## %%SUBCHART_CONTAINER/POD_DESCRIPTION%%
##
# %%SUBCHART_NAME%%:
SUBCHART_NAME:
  enabled: false
  # %%OTHER_PARAMETERS_RELATED_TO_THIS_SUBCHART%%
