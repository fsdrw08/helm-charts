## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
##

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
## @param global.storageClass Global StorageClass for Persistent Volume(s)
##
global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  storageClass: ""

## @section Common parameters
##
## @param nameOverride String to partially override common.names.name
##
nameOverride: ""
## @param fullnameOverride String to fully override common.names.fullname
##
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}

## @param vault.workloadKind specify the deploy kindï¼š Pod, or Deployment
workloadKind: Pod
## @section vault Parameters
##

## %%MAIN_CONTAINER/POD_DESCRIPTION%%
##
vault:
  ## hashicorp vault image
  ## ref: https://hub.docker.com/r/hashicorp/vault/tags/
  ## @param vault.image.registry vault image registry
  ## @param vault.image.repository vault image repository
  ## @param vault.image.tag vault image tag (immutable tags are recommended)
  ## @param vault.image.digest vault image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)
  ## @param vault.image.pullPolicy vault image pull policy
  ## @param vault.image.pullSecrets vault image pull secrets
  ##
  image:
    registry: docker.io
    repository: hashicorp/vault
    tag: 1.19.4
    digest: ""
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## @param vault.podRestartPolicy specify the pod restart policy if workloadKind set to Pod
  ## available options: Always, OnFailure, Never
  podRestartPolicy: Never
  ## @param vault.replicaCount Number of vault replicas to deploy
  ##
  replicaCount: 1
  ## @param vault.containerPorts vault container port to expose to host
  ## containerPorts:
  ##   - name: http
  ##     containerPort: 80
  ##     hostIP: 192.168.255.10
  ##     protocol: TCP
  ##   - name: https
  ##     containerPort: 443
  ##     hostIP: 192.168.255.10
  ##     protocol: TCP
  ##
  containerPorts:
    - name: api
      containerPort: 8200
      hostPort: 8200
      protocol: TCP
    - name: cluster
      containerPort: 8201
      hostPort: 8201
      protocol: TCP
  ## Configure extra options for vault containers' liveness and readiness probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## ref: https://github.com/hashicorp/vault-helm/blob/main/values.yaml#L101
  ## @param vault.livenessProbe.enabled Enable livenessProbe on vault containers
  ## @param vault.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param vault.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param vault.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param vault.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param vault.livenessProbe.successThreshold Success threshold for livenessProbe
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 3
    periodSeconds: 300
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    exec:
      command:
        - vault
        - status
        - -tls-skip-verify
  ## ref: https://github.com/hashicorp/vault-helm/blob/main/values.yaml#L113
  ## @param vault.readinessProbe.enabled Enable readinessProbe on vault containers
  ## @param vault.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param vault.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param vault.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param vault.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param vault.readinessProbe.successThreshold Success threshold for readinessProbe
  ## there is no readinessProbe in podman currently
  readinessProbe:
    enabled: false
    initialDelaySeconds: 180
    periodSeconds: 300
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    exec:
      command: ["/bin/sh", "-ec", "vault status -tls-skip-verify"]
  ## @param vault.startupProbe.enabled Enable startupProbe on vault containers
  ## @param vault.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
  ## @param vault.startupProbe.periodSeconds Period seconds for startupProbe
  ## @param vault.startupProbe.timeoutSeconds Timeout seconds for startupProbe
  ## @param vault.startupProbe.failureThreshold Failure threshold for startupProbe
  ## @param vault.startupProbe.successThreshold Success threshold for startupProbe
  ##
  startupProbe:
    enabled: false
    initialDelaySeconds: foo
    periodSeconds: bar
    timeoutSeconds: foo
    failureThreshold: bar
    successThreshold: foo
  ## @param vault.customLivenessProbe Custom livenessProbe that overrides the default one
  ##
  customLivenessProbe: {}
  ## @param vault.customReadinessProbe Custom readinessProbe that overrides the default one
  ##
  customReadinessProbe: {}
  ## @param vault.customStartupProbe Custom startupProbe that overrides the default one
  ##
  customStartupProbe: {}
  ## vault resource requests and limits
  ## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param vault.resourcesPreset Set vault container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if vault.resources is set (vault.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param vault.resources Set vault container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Configure Pods Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param vault.podSecurityContext.enabled Enabled vault pods' Security Context
  ## @param vault.podSecurityContext.runAsUser Set vault pods' Security Context runAsUser
  ## @param vault.podSecurityContext.runAsNonRoot Set vault pods' Security Context runAsNonRoot
  ##
  podSecurityContext:
    enabled: false
    runAsUser: 100
    runAsGroup: 1000
  ## Configure Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## ref: https://github.com/hashicorp/vault/blob/v1.19.4/Dockerfile
  ## @param vault.containerSecurityContext.enabled Enabled vault containers' Security Context
  ## @param vault.containerSecurityContext.runAsUser Set vault containers' Security Context runAsUser
  ## @param vault.containerSecurityContext.runAsNonRoot Set vault containers' Security Context runAsNonRoot
  ## @param vault.containerSecurityContext.readOnlyRootFilesystem Set vault containers' Security Context runAsNonRoot
  ##
  containerSecurityContext:
    enabled: true
    runAsUser: 100
    runAsGroup: 1000
    runAsNonRoot: true
    readOnlyRootFilesystem: false
    # capabilities:
    #   add:
    #     - "IPC_LOCK"

  # %%OTHER_PARAMETERS_RELATED_TO_THIS_CONTAINER/POD%%

  ## @param vault.configFiles config file to start vault, the sub config block will convert to json and injected as ConfigMap
  ## You can add whatever sub items under this block
  ## ref: https://developer.hashicorp.com/vault/docs/configuration
  ## ref: https://developer.hashicorp.com/vault/tutorials/operations/configure-vault#config
  ##
  configFiles:
    ## @param vault.configFiles.main main config for server
    ##
    main:
      ## @param vault.configFiles.main.disable_mlock Disables the server from executing the mlock syscall
      ##
      disable_mlock: true
      log_level: info
      ## @param vault.configFiles.main.storage storage config for server
      ## The storage stanza configures the storage backend, which represents the location for the durable storage of Vault's information
      ## if the storage file changed, do forget also change it in persistence.mountPath.storage
      ## https://developer.hashicorp.com/vault/docs/configuration/storage
      ## https://github.com/kirubasankars/bedrock/blob/b2037fb394d149a9fed560cc60d284b28b4585fb/src/main/agent/vault/config/vault.json#L3
      ##
      storage:
        file:
          path: /vault/file
      ## @param vault.configFiles.main.ui Enables the built-in web UI, which is available on all listeners (address + port) at the /ui path.
      ## Browsers accessing the standard Vault API address will automatically redirect there.
      ## This can also be provided via the environment variable VAULT_UI.
      ## The UI runs on the same port as the Vault listener. As such, you must configure at least one listener stanza in order to access the UI.
      ## For more information, please see the https://developer.hashicorp.com/vault/docs/configuration/ui.
      ##
      ui: true
      ## @param vault.configFiles.main.listener Configures how Vault is listening for API requests.
      ## https://developer.hashicorp.com/vault/docs/configuration/listener/tcp
      ## https://github.com/hashicorp/vault/blob/v1.19.4/command/server/test-fixtures/config4.hcl.json#L6
      ## https://github.com/hashicorp/vault-helm/blob/main/values.yaml#L931
      ##
      listener:
        - tcp:
            tls_disable: true
            address: "[::]:8200"
            cluster_address: "[::]:8201"
            # https://github.com/hashicorp/vault/blob/v1.19.4/website/content/docs/deploy/kubernetes/helm/examples/standalone-tls.mdx?plain=1#L191
            # cert and key must put in the same dir: https://github.com/containers/podman/blob/22ca67a7536e2f8e8554e734c102fe1ae181fbb5/pkg/specgen/specgen.go#L641
            # the tls file should better set together with below vault.tls block
            tls_cert_file: /vault/userconfig/vault-server-tls/tls.crt
            tls_key_file: /vault/userconfig/vault-server-tls/tls.key
            tls_disable_client_certs: true

  ## @param vault.tls secret setting of cert and key or whatever tls content will set in the container
  ## @param vault.tls.mountPath secret mount path setting of cert and key or whatever tls content will set in the container
  ##
  tls:
    mountPath: /vault/userconfig/vault-server-tls
    ## @param vault.tls.contents secret content of cert and key or whatever tls content will set in the container
    ## You can set the content key as whatever file name you like
    ## But the tls set in configFiles above must match with the settings here
    ## key and certificate should start with -----BEGIN CERTIFICATE----- or -----BEGIN RSA PRIVATE KEY-----
    ## e.g.
    ## content:
    ##  ca.crt: ""
    ##  tls.crt: ""
    ##  tls.key: ""
    ##
    contents: {}
  ## @param vault.existingConfigmap The name of an existing ConfigMap with your custom configuration for vault
  ##
  existingConfigmap:
  ## @param vault.command Override default container command (useful when using custom images)
  ##
  command: []
  ## @param vault.args Override default container args (useful when using custom images)
  ##
  args:
    - server
  ## @param vault.hostAliases vault pods host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param vault.podLabels Extra labels for vault pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param vault.podAnnotations Annotations for vault pods
  ## to keep container user as same permission as host user, set keep-id point to the container user and group id
  ## the userns annotation only work podman v4.9+
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ## ref: https://github.com/containers/podman/discussions/22378
  ## ref: https://github.com/hashicorp/vault/blob/v1.19.4/Dockerfile#L121-L123
  ##
  podAnnotations:
    io.podman.annotations.userns: keep-id:uid=100,gid=1000
  ## Autoscaling configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  ## @param vault.autoscaling.enabled Enable autoscaling for vault
  ## @param vault.autoscaling.minReplicas Minimum number of vault replicas
  ## @param vault.autoscaling.maxReplicas Maximum number of vault replicas
  ## @param vault.autoscaling.targetCPU Target CPU utilization percentage
  ## @param vault.autoscaling.targetMemory Target Memory utilization percentage
  ##
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""

  ## @param vault.extraEnvVars Array with extra environment variables to add to vault nodes
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars:
    # https://github.com/hashicorp/vault/blob/v1.19.4/.release/docker/docker-entrypoint.sh
    # https://github.com/elihe2011/summary/blob/1603f477212f552a4c64ab8a0729539a52a1bd27/edgex/edgex/edgex_security/ok/02.edgex-vault.yaml#L64
    - name: SKIP_CHOWN
      value: "true"
    - name: SKIP_SETCAP
      value: "true"
  ## @param vault.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for vault nodes
  ##
  extraEnvVarsCM: ""
  ## @param vault.extraEnvVarsSecret Name of existing Secret containing extra env vars for vault nodes
  ##
  extraEnvVarsSecret: ""
  ## @param vault.extraVolumes Optionally specify extra list of additional volumes for the vault pod(s)
  ##
  extraVolumes: []
  ## @param vault.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the vault container(s)
  ##
  extraVolumeMounts: []

  ## @param vault.autoUnseal run auto unseal process in a sidecar container
  ## ref: https://hub.docker.com/r/apteno/alpine-jq/tags/
  ##
  autoUnseal:
    ## @param vault.autoUnseal.enabled Specifies whether run auto unseal for vault
    ##
    enabled: false
    ## @param vault.autoUnseal.image.registry [default: REGISTRY_NAME] vault auto unseal image registry
    ## @param vault.autoUnseal.image.repository [default: REPOSITORY_NAME/postgres-exporter] vault auto unseal image repository
    ## @param vault.autoUnseal.image.tag vault auto unseal image tag
    ## @param vault.autoUnseal.image.digest vault auto unseal image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    ## @param vault.autoUnseal.image.pullPolicy vault auto unseal image pull policy
    ## @param vault.autoUnseal.image.pullSecrets Specify docker-registry secret names as an array
    ##
    image:
      registry: docker.io
      repository: apteno/alpine-jq
      tag: latest
      digest: ""
      ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
      ##
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## Example:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
    ## Configure Pods Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param vault.autoUnseal.podSecurityContext.enabled Enabled vault pods' Security Context
    ## @param vault.autoUnseal.podSecurityContext.fsGroup Set vault pod's Security Context fsGroup
    ##
    podSecurityContext:
      enabled: false
      runAsUser: 100
      runAsGroup: 1000
    ## Configure Container Security Context for Auth Proxy
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    ## @param vault.autoUnseal.containerSecurityContext.enabled Enabled containers' Security Context
    ## @param vault.autoUnseal.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
    ## @param vault.autoUnseal.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
    ## @param vault.autoUnseal.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
    ## @param vault.autoUnseal.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
    ## @param vault.autoUnseal.containerSecurityContext.privileged Set container's Security Context privileged
    ## @param vault.autoUnseal.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
    ## @param vault.autoUnseal.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
    ## @param vault.autoUnseal.containerSecurityContext.capabilities.drop List of capabilities to be dropped
    ## @param vault.autoUnseal.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
    ##
    containerSecurityContext:
      enabled: false
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      privileged: false
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: "RuntimeDefault"
    ## @param vault.autoUnseal.env Array with environment variables to add to unseal container
    ##
    env:
      - name: VAULT_ADDR
        value: http://{{ template "common.names.fullname" . }}:8200
      - name: VAULT_OPERATOR_SECRETS_JSON_PATH
        value: "/vault/unseal/vault_operator_secrets"
      - name: SECRET_SHARES
        value: 5
      - name: SECRET_THRESHOLD
        value: 3

  ## @param vault.sidecars Add additional sidecar containers to the vault pod(s)
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: []
  ## @param vault.initContainers Add additional init containers to the vault pod(s)
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']
  ##
  initContainers: []

## @section Persistence Parameters
##

## Enable persistence using Persistent Volume Claims
## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  ## @param persistence.enabled Enable persistence using Persistent Volume Claims
  ##
  enabled: true
  ## @param persistence.mountPath Path to mount the vault volumes at.
  ## @param persistence.mountPath.storage Path to mount the vault storage volumes at.
  ## @param persistence.mountPath.logs Path to mount the vault logs volumes at.
  ## @param persistence.mountPath.unseal Path to mount the vault unseal file at.
  ##
  mountPath:
    storage: /vault/file
    logs: /vault/logs
    unseal: /vault/unseal
  ## @param persistence.subPath The subdirectory of the volume to mount to, useful in dev environments and one PV for multiple services
  ##
  subPath: ""
  ## @param persistence.storageClass Storage class of backing PVC
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: ""
  ## @param persistence.annotations Persistent Volume Claim annotations
  ##
  annotations: {}
  ## @param persistence.accessModes Persistent Volume Access Modes
  ##
  accessModes:
    - ReadWriteOnce
  ## @param persistence.size Size of data volume
  ##
  size: 8Gi
  ## @param persistence.existingClaim The name of an existing PVC to use for persistence
  ##
  existingClaim: ""
## @section Init Container Parameters
##

## 'volumePermissions' init container parameters
## Changes the owner and group of the persistent volume mount point to runAsUser:fsGroup values
##   based on the *podSecurityContext/*containerSecurityContext parameters
##
volumePermissions:
  ## @param volumePermissions.enabled Enable init container that changes the owner/group of the PV mount point to `runAsUser:fsGroup`
  ##
  enabled: true
  ## OS Shell + Utility image
  ## ref: https://hub.docker.com/r/bitnami/os-shell/tags/
  ## @param volumePermissions.image.registry OS Shell + Utility image registry
  ## @param volumePermissions.image.repository OS Shell + Utility image repository
  ## @param volumePermissions.image.tag OS Shell + Utility image tag (immutable tags are recommended)
  ## @param volumePermissions.image.pullPolicy OS Shell + Utility image pull policy
  ## @param volumePermissions.image.pullSecrets OS Shell + Utility image pull secrets
  ##
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 12-debian-12
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## Init container's resource requests and limits
  ## ref: http://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param volumePermissions.resourcesPreset Set init container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if volumePermissions.resources is set (volumePermissions.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "nano"
  ## @param volumePermissions.resources Set init container requests and limits for different resources like CPU or memory (essential for production workloads)
  ## Example:
  ## resources:
  ##   requests:
  ##     cpu: 2
  ##     memory: 512Mi
  ##   limits:
  ##     cpu: 3
  ##     memory: 1024Mi
  ##
  resources: {}
  ## Init container Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param volumePermissions.containerSecurityContext.runAsUser Set init container's Security Context runAsUser
  ## NOTE: when runAsUser is set to special value "auto", init container will try to chown the
  ##   data folder to auto-determined user&group, using commands: `id -u`:`id -G | cut -d" " -f2`
  ##   "auto" is especially useful for OpenShift which has scc with dynamic user ids (and 0 is not allowed)
  ##
  containerSecurityContext:
    runAsUser: 0

## @section Other Parameters
##

## %%SUBCHART_CONTAINER/POD_DESCRIPTION%%
##
# %%SUBCHART_NAME%%:
SUBCHART_NAME:
  enabled: false
  # %%OTHER_PARAMETERS_RELATED_TO_THIS_SUBCHART%%
